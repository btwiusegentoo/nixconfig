#+TITLE: My NixOS configuration
#+LANGUAGE: en
#+STARTUP: inlineimages overview
#+PROPERTY: header-args :tangle yes :noweb yes :cache yes :results silent

[[https://builtwithnix.org/badge.svg]] [[https://github.com/btwiusegentoo/nixconfig/workflows/Haskell%20Linter/badge.svg]]

#+ATTR_HTML: :width 600
#+ATTR_ORG: :width 600
[[file:pictures/screenshot1.png]] [[file:pictures/screenshot2.png]] [[file:pictures/wallpaper2.png]]


* Introduction :noexport:
Hi! This is my repo that contains my configuration files for my machines (aka dotfiles)
This repository contains configuration for three hosts currently
- Ryzen desktop
- My portable laptop
- My lowspec server
All hosts runs NixOS and it's managed by [[https://nixos.wiki/wiki/Flakes][Nix Flakes]].
[[https://github.com/nix-community/home-manager][home-manager]] is used to manage user environment. I try to install programs/services in user level as much as possible.
I use [[https://xmonad.org/][xmonad]] as window manager for Desktop and Laptop, while server is headless.
My English is not good, but I will try to make this into literate config just for fun.
To generate actual files, open this file in emacs, and execute ~M-x org-babel-tangle~.
You can install this config running this command at repository root ~nixos-rebuild switch --flake .~
Note that you need [[#nix][flakes enabled to install]].
Use ~SPC m .~ in doom-emacs to move faster to headlines.

* Table of Contents :TOC_2_gh:
- [[#flake][Flake]]
  - [[#flake-inputs][Flake inputs]]
  - [[#default-imports][default imports]]
  - [[#x11-imports][X11 imports]]
  - [[#home-manager-imports][home-manager imports]]
  - [[#home-manager-x11-imports][home-manager X11 imports]]
  - [[#nixpkgs-config][nixpkgs config]]
  - [[#import-overlays][import overlays]]
  - [[#machines][Machines]]
- [[#nix][Nix]]
  - [[#enable-flakes][Enable flakes]]
  - [[#allowed-users][Allowed users]]
  - [[#trusted-users][Trusted users]]
  - [[#integrate-lorri-direnv-with-fish-shell][Integrate lorri direnv with fish shell]]
- [[#input][Input]]
  - [[#keyboard][Keyboard]]
- [[#output][Output]]
- [[#other-hardwares][Other Hardwares]]
  - [[#bluetooth][Bluetooth]]
  - [[#tlp][TLP]]
  - [[#thinkfan][Thinkfan]]
  - [[#zram][ZRAM]]
- [[#look-and-feel][Look And Feel]]
  - [[#color-scheme][Color Scheme]]
  - [[#fonts][Fonts]]
  - [[#wallpaper][Wallpaper]]
  - [[#icons][Icons]]
  - [[#cursors][Cursors]]
  - [[#opacity][Opacity]]
  - [[#border][Border]]
- [[#terminalshell][Terminal/Shell]]
  - [[#alacritty][Alacritty]]
  - [[#tty][TTY]]
  - [[#fish-shell][fish shell]]
  - [[#starship][starship]]
  - [[#git][Git]]
  - [[#bat][bat]]
  - [[#fzf][fzf]]
  - [[#lsd][lsd]]
  - [[#tmux][tmux]]
- [[#web-browser][Web Browser]]
  - [[#qutebrowser][qutebrowser]]
  - [[#firefox][Firefox]]
- [[#multimedia][Multimedia]]
  - [[#pulseaudio][PulseAudio]]
  - [[#mpv][mpv]]
  - [[#zathura][zathura]]
- [[#neovim][neovim]]
  - [[#open-lazygit-commit-window-inside-neovim][Open lazygit commit window inside neovim]]
- [[#security][Security]]
  - [[#doas][doas]]
  - [[#clamav][ClamAV]]
  - [[#gnupg][GnuPG]]
- [[#common-configs][Common configs]]
  - [[#x-server][X server]]
  - [[#lightdm][LightDM]]
  - [[#locale][Locale]]
  - [[#xdg][XDG]]
- [[#services][Services]]
  - [[#openssh][OpenSSH]]
  - [[#dunst][Dunst]]
  - [[#picom][Picom]]
- [[#machines-1][Machines]]
  - [[#default-system-configs][Default system configs]]
  - [[#desktop][Desktop]]
  - [[#laptop][Laptop]]
  - [[#server][Server]]
- [[#symlinks][Symlinks]]
  - [[#etc-files][/etc files]]
  - [[#config-files][~/.config files]]
- [[#credits][Credits]]

* [0/4] Tasks :noexport:
** TODO Finish documentation of system modules
** TODO Finish documentation of user modules
** TODO Document emacs
** TODO Document xmonad
* Flake
A [[https://nixos.wiki/wiki/Flakes][flake]] is (usually) a Git repository that contains a file named ~flake.nix~ at root.
This repository is compatible with nix flakes.
The following code is the base code of  ~flake.nix~ file.
#+begin_src nix :tangle flake.nix :noweb no-export
# This file is generated from "README.org"
{
  description = "NixOS configuration for all machines";

  <<flake-inputs>>

  outputs = inputs@{ self, home-manager, nur, nixpkgs, ... }:
    let
      inherit (builtins) listToAttrs attrValues attrNames readDir;
      inherit (nixpkgs) lib;
      inherit (lib) removeSuffix;

      <<nixpkgs-config>>

      <<flake-defaults>>
    in
    {
      <<flake-overlays>>

      nixosConfigurations = {
        <<desktop1>>
        <<laptop1>>
        <<server1>>
      };
    };
}
#+end_src
** Flake inputs
Flakes provides a better approach than channel to manage nixpkgs and overlays. 
It's called ~inputs~.
Channels aren't pinned in the config. When updating nixpkgs, you have to run this command ~nix-channel --update~ *locally* everytime.
Therefore, nixpkgs revision differs from machine to machine, making not fully reproducible.
Using nix flakes, All inputs are automatically pinned at specific revision in ~flake.lock~ file at repository root to guarantee reproducibility.
This can also be achieved by manually pinning nixpkgs at specific revision using overlays.
But flakes does it automatically, without having to update rev and sha256 manually everytime.
You can update inputs easily like this: ~nix flake --update-input nixpkgs~

Currently, I have *home-manager*, *NUR* (nix user repository), *emacs pgtk nativecomp overlay*, and *nixpkgs* 20.09,unstable,master as inputs:
#+name: flake-inputs
#+begin_src nix
  inputs = {
    home-manager = {
      url = "github:rycee/home-manager";
      inputs = {
        nixpkgs.follows = "nixpkgs";
      };
    };
    nur.url = "github:nix-community/NUR";
    emacs.url = "github:berbiche/emacs-pgtk-nativecomp-overlay";

    nixpkgs.url = "github:nixos/nixpkgs/nixos-20.09";
    unstable.url = "github:nixos/nixpkgs/nixos-unstable";
    master.url = "github:nixos/nixpkgs/master";
  };
#+end_src

** default imports
Import default modules
#+name: flake-defaults
#+begin_src nix
      defaults = { pkgs, ... }: {
        imports = [
          ./cachix.nix
          ./modules/common/nix.nix
          ./modules/common/doas.nix
          ./modules/common/console.nix
          ./modules/common/bluetooth.nix
          ./modules/common/etcfiles.nix
          ./modules/common/systempackages.nix
          ./modules/common/globallocale.nix
          ./modules/services/pulseaudio.nix
          ./modules/services/clamav.nix
          ./modules/services/openssh.nix
          ./modules/services/zram.nix
        ];
      };
#+end_src

** X11 imports
List default modules that *requires X11* here
#+name: x11-defaults
#+begin_src nix
./modules/common/fonts.nix
#+end_src
** home-manager imports
List default modules for home-manager that *doesn't require X11* here
#+name: home-manager-defaults
#+begin_src nix
./modules/terminal/fish.nix
./modules/terminal/git.nix
./modules/terminal/bat.nix
./modules/terminal/fzf.nix
./modules/terminal/lsd.nix
./modules/terminal/starship.nix
./modules/terminal/tmux.nix
./modules/services/gpg.nix
#+end_src
** home-manager X11 imports
List default modules for home-manager that *requires X11* here
#+name: home-manager-x11-defaults
#+begin_src nix
./modules/services/dunst.nix
./modules/services/picom.nix
./modules/terminal/alacritty.nix
./modules/gui/qutebrowser.nix
./modules/gui/firefox.nix
./modules/gui/mpv.nix
#+end_src
** nixpkgs config
This configuration is for default nixpkgs.
Set system arch to x86_64, Allow installation for non-free software(also known as proprietary software), and import overlays from [[#overlays][here]]
#+name: nixpkgs-config
#+begin_src nix
      pkgs = (import nixpkgs) {
        system = "x86_64-linux";
        config = { allowUnfree = true; };
        overlays = attrValues self.overlays;
      };
#+end_src

** import overlays
This code searchs ~./overlays~ directory for nix files and automatically imports the files.
NUR, nixos-unstable, nixpkgs master are imported as package set of pkgs here. Packages from these package sets can be referred like ~pkgs.unstable.fish~ ~pkgs.master.discord~ ~pkgs.nur.repos.rycee.firefox-addons~
This have a benefit than just importing the same way as pkgs like ~{pkgs, unstable, master, ... }:~. If you import unstable just like pkgs, idk why, but it can't be imported from overlays.
So it can't be used to override packages of home-manager modules.
Importing as package set makes it possible and it's more convenient.
#+name: flake-overlays
#+begin_src nix
      overlays =
        let
          overlayFiles = listToAttrs (map
            (name: {
              name = removeSuffix ".nix" name;
              value = import (./overlays + "/${name}");
            })
            (attrNames (readDir ./overlays)));
        in
        overlayFiles // {
          nur = final: prev: {
            nur = import inputs.nur { nurpkgs = final; pkgs = final; };
          };
          emacsPgtk = final: prev: {
            emacsGccPgtk = inputs.emacs.packages.${final.system}.emacsGccPgtk;
          };
          unstable = final: prev: {
            unstable = import inputs.unstable {
              system = final.system;
              config.allowUnfree = true;
            };
          };
          master = final: prev: {
            master = import inputs.master {
              system = final.system;
              config.allowUnfree = true;
            };
          };
        };
#+end_src
** Machines
These are the codes that evaluates a NixOS configuration for tools like ~nixos-rebuild~ for each machines.
It imports modules (that contains configuration for) for each machines.
*** Desktop
#+name: desktop1
#+begin_src nix
        desktop1 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              defaults
              ./machines/maindesktop/configuration.nix
              ./modules/common/xserver.nix
              <<x11-defaults>>
              home-manager.nixosModules.home-manager
              ({
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users.btw = { ... }: {
                  imports = [
                    ./machines/maindesktop/home.nix
                    <<home-manager-x11-defaults>>
                    <<home-manager-defaults>>
                  ];
                };
              })
            ];
          inherit pkgs;
        };
#+end_src

*** Laptop
#+name: laptop1
#+begin_src nix
        laptop1 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              defaults
              ./machines/mainlaptop/configuration.nix
              ./modules/common/xserverlaptop.nix
              ./modules/services/tlp.nix
              ./modules/services/thinkfan.nix
              <<x11-defaults>>
              home-manager.nixosModules.home-manager
              ({
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users.x230 = { ... }: {
                  imports = [
                    ./machines/mainlaptop/home.nix
                    <<home-manager-x11-defaults>>
                    <<home-manager-defaults>>
                  ];
                };
              })
            ];
          inherit pkgs;
        };
#+end_src

*** Server
#+name: server1
#+begin_src nix
        server1 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              defaults
              ./machines/mainserver/configuration.nix
              home-manager.nixosModules.home-manager
              ({
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users.hac = { ... }: {
                  imports = [
                    ./machines/mainserver/home.nix
                    <<home-manager-defaults>>
                  ];
                };
              })
            ];
          inherit pkgs;
        };
#+end_src
* Nix
Configure Nix package manager
#+begin_src nix :tangle modules/common/nix.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  <<nix-package>>

  nix.extraOptions = ''
    <<nix-enable-flakes>>
    builders-use-substitutes = true
  '';
  <<nix-allowed-users>>
  <<nix-trusted-users>>
}
#+end_src
** Enable flakes
Select Nix package that contains flakes
#+name: nix-package
#+begin_src nix
nix.package = pkgs.nixFlakes;
#+end_src
Enable nix flakes(flakes is still a experimental feature.)
#+name: nix-enable-flakes
#+begin_src nix
experimental-features = nix-command flakes
#+end_src
** Allowed users
A list of names of users that are allowed to connect to the Nix daemon.
#+name: nix-allowed-users
#+begin_src nix
nix.allowedUsers = [ "@wheel" ];
#+end_src
** Trusted users
A list of names of users that have additional rights when connecting to the Nix daemon.
Add user here to use cachix and run ~nixos-rebuild~ from that user.
#+name: nix-trusted-users
#+begin_src nix
nix.trustedUsers = [ "root" "@wheel" ];
#+end_src
** Integrate lorri direnv with fish shell
For direnv to work properly it needs to be hooked into the shell.
Once the hook is configured, restart your shell for direnv to be activated.
#+name: fish-direnv
#+begin_src fish
eval (direnv hook fish)
#+end_src
* Input
** Keyboard
*** Xorg repeat rate
Default repeat rate is too slow. Change it
#+name: xserver-autorepeat
#+begin_src nix
    autoRepeatDelay = 200;
    autoRepeatInterval = 25;
#+end_src
*** Dvorak
I use Dvorak layout on HHKB.
[[https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/KB_United_States_Dvorak.svg/800px-KB_United_States_Dvorak.svg.png]]
Dvorak layout is a ergonomic alternative for qwerty layout that requires less movement.
My keybinds are configured with HHKB Dvorak usage in mind. I didn't remapped vim(or evil-mode) keys(hjkl) because it already feels natural as is.

Console config
#+name: consolekeymap
#+begin_src nix
keyMap = "dvorak";
#+end_src

Xorg config
#+name: xserver-keymap
#+begin_src nix
layout = "us";
xkbVariant = "dvorak";
#+end_src
*** IME
Install Japanese IME
#+name: japanese-ime
#+begin_src nix
i18n.inputMethod.enabled = "fcitx";
i18n.inputMethod.fcitx.engines = with pkgs.fcitx-engines; [ mozc ];
#+end_src
* Output
* Other Hardwares
** Bluetooth
This module configures bluetooth for all machines.
#+begin_src nix :tangle modules/common/bluetooth.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  hardware.bluetooth = {
    <<bluetooth-enable>>
    <<bluetooth-package>>
    <<bluetooth-config>>
  };
}
#+end_src
*** Enable Bluetooth
#+name: bluetooth-enable
#+begin_src nix
enable = true;
#+end_src
*** Bluetooth package
bluezFull enables all bluez plugins. It's needed for many devices.
#+name: bluetooth-package
#+begin_src nix
package = pkgs.bluezFull;
#+end_src
*** Bluetooth config
Setting controller mode to ~"bredr"~ (disabling Bluetooth LE) is a workaround to fix airpods.
#+name: bluetooth-config
#+begin_src nix
config = {
    General = {
        ControllerMode = "bredr";
    };
};
#+end_src
** TLP
TLP is a feature-rich command line utility for Linux, saving laptop battery power without the need to delve deeper into technical details.
#+begin_src nix :tangle modules/services/tlp.nix :noweb no-export
# This file is generated from "README.org"
{
  services.tlp = {
    <<tlp-enable>>
    settings = {
      <<tlp-settings>>
    };
  };
}
#+end_src
*** Enable TLP
#+name: tlp-enable
#+begin_src nix
enable = true;
#+end_src
*** TLP settings
#+name: tlp-settings
#+begin_src nix
"SOUND_POWER_SAVE_ON_AC" = 0;
"SOUND_POWER_SAVE_ON_BAT" = 1;
"SOUND_POWER_SAVE_CONTROLLER" = "Y";
"BAY_POWEROFF_ON_AC" = 0;
"BAY_POWEROFF_ON_BAT" = 1;
"DISK_APM_LEVEL_ON_AC" = "254 254";
"DISK_APM_LEVEL_ON_BAT" = "128 128";
"DISK_IOSCHED" = "none none";
"SATA_LINKPWR_ON_AC" = "med_power_with_dipm max_performance";
"SATA_LINKPWR_ON_BAT" = "min_power";
"MAX_LOST_WORK_SECS_ON_AC" = 15;
"MAX_LOST_WORK_SECS_ON_BAT" = 60;
"NMI_WATCHDOG" = 0;
"WIFI_PWR_ON_AC" = "off";
"WIFI_PWR_ON_BAT" = "on";
"WOL_DISABLE" = "Y";
"CPU_SCALING_GOVERNOR_ON_AC" = "powersave";
"CPU_SCALING_GOVERNOR_ON_BAT" = "powersave";
"CPU_MIN_PERF_ON_AC" = 0;
"CPU_MAX_PERF_ON_AC" = 100;
"CPU_MIN_PERF_ON_BAT" = 0;
"CPU_MAX_PERF_ON_BAT" = 50;
"CPU_BOOST_ON_AC" = 1;
"CPU_BOOST_ON_BAT" = 1;
"SCHED_POWERSAVE_ON_AC" = 0;
"SCHED_POWERSAVE_ON_BAT" = 1;
"ENERGY_PERF_POLICY_ON_AC" = "performance";
"ENERGY_PERF_POLICY_ON_BAT" = "power";
"RESTORE_DEVICE_STATE_ON_STARTUP" = 0;
"RUNTIME_PM_ON_AC" = "on";
"RUNTIME_PM_ON_BAT" = "auto";
"PCIE_ASPM_ON_AC" = "default";
"PCIE_ASPM_ON_BAT" = "powersupersave";
"USB_AUTOSUSPEND" = 1;
#+end_src
** Thinkfan
Thinkfan is a simple, lightweight fan controler for IBM/Lenovo ThinkPads
#+begin_src nix :tangle modules/services/thinkfan.nix :noweb no-export
# This file is generated from "README.org"
{
  services.thinkfan = {
    <<thinkfan-enable>>
    <<thinkfan-fan>>
    levels = ''
        <<thinkfan-levels>>
    '';
  };
}
#+end_src
*** Enable Thinkfan
#+name: thinkfan-enable
#+begin_src nix
enable = true;
#+end_src
*** Select Fan
Specify the fan to use.
#+name: thinkfan-fan
#+begin_src nix
fan = "tp_fan /proc/acpi/ibm/fan";
#+end_src
*** Select sensors
thinkfan can read temperatures from three possible sources:
~/proc/acpi/ibm/thermal~ which is provided by thinkpad_acpi kernel module
~/sys/class/humon/*/temp*_input~ which may be provided by any humon drivers
S.M.A.R.T. which reads the temperature directly from the hard drive using libatasmart
#+name: thinkfan-sensors
#+begin_src nix
sensors = ''
    hwmon /sys/class/thermal/thermal_zone0/temp
'';
#+end_src
*** Levels
Configure fan speed
#+name: thinkfan-levels
#+begin_src nix
(0, 0,  42)
(1, 40, 47)
(2, 45, 52)
(3, 50, 57)
(4, 55, 62)
(5, 60, 72)
(6, 65, 77)
(7, 70, 80)
(127, 75, 32767)
#+end_src
** ZRAM
ZRAM is a linux kernel module that creates in-memory compressed devices and swap space. Literally download more RAM
#+begin_src nix :tangle modules/services/zram.nix :noweb no-export
# This file is generated from "README.org"
{
  zramSwap = {
    <<zram-enable>>
    <<zram-algorithm>>
    <<zram-memory-percent>>
  };
}
#+end_src
*** Enable ZRAM
#+name: zram-enable
#+begin_src nix
enable = true;
#+end_src
*** ZRAM algorithm
Compression algorithm. lzo has good compression, but is slow. lz4 has bad compression, but is fast.
zstd is both good compression and fast, but requires newer kernel.
#+name: zram-algorithm
#+begin_src nix
algorithm = "zstd";
#+end_src
*** ZRAM memory percent
Maximum amount of memory that can be used by the zram swap devices.
Defaults to 1/2 of total RAM.
#+name: zram-memory-percent
#+begin_src nix
memoryPercent = 100;
#+end_src
* Look And Feel
** Color Scheme
I use material-palenight as colorscheme for everything from editor to browser.
*** Color palette preview
#+ATTR_HTML: :width 600
#+ATTR_ORG: :width 600
[[file:pictures/material-palenight-palette.png]]
Color palette picture taken from [[https://www.material-theme.com/docs/reference/color-palette/][here]]
*** Console Colors
The 16 colors palette used by TTY.
Leave empty to use the default colors.
Colors must be in hexademical format and listed in order from color 0 to color 15.
#+name: consolecolors
#+begin_src nix
colors = [ "434759" "f07178" "c3e88d" "ffcb6b" "82aaff" "c792ea" "89ddff" "d0d0d0" "434758" "ff8b92" "ddffa7" "ffe585" "9cc4ff" "e1acff" "a3f7ff" "fefefe" ];
#+end_src

*** LightDM Colors
Configure center dialog colors
#+name: lightdm-greeter-colors
#+begin_src nix
text-color = "#A6ACCD"
error-color = "#F07178"
window-color = "#202331"
border-color = "#202331"
password-color = "#A6ACCD"
password-background-color = "#202331"
password-border-color = "#202331"
#+end_src
*** Notification Colors
#+name: dunst-colors
#+begin_src nix
global = {
    frame_color = "#959DCB";
    separator_color = "#959DCB";
};
urgency_low = {
    background = "#444267";
    foreground = "#676E95";
};
urgency_normal = {
    background = "#32374D";
    foreground = "#959DCB";
};
urgency_critical = {
    background = "#F07178";
    foreground = "#959DCB";
};
#+end_src
*** Alacritty Colors
Enable custom cursor colors
#+name: alacritty-custom-cursor-colors
#+begin_src nix
custom_cursor_colors = true;
#+end_src
Color codes taken from [[https://github.com/aaron-williamson/base16-alacritty/blob/master/colors/base16-material-palenight-256.yml][here]]
#+name: alacritty-colors
#+begin_src nix
colors = {
  # Default colors
  primary = {
    background = "0x292d3e";
    foreground = "0x959dcb";
  };
  cursor = {
    text = "0x202331";
    cursor = "0xc792ea";
  };
  # Normal colors
  normal = {
    black = "0x292d3e";
    red = "0xf07178";
    green = "0xc3e88d";
    yellow = "0xffcb6b";
    blue = "0x82aaff";
    magenta = "0xc792ea";
    cyan = "0x89ddff";
    white = "0x959dcb";
  };
  # Bright colors
  bright = {
    black = "0x676e95";
    red = "0xf07178";
    green = "0xc3e88d";
    yellow = "0xffcb6b";
    blue = "0x82aaff";
    magenta = "0xc792ea";
    cyan = "0x89ddff";
    white = "0xffffff";
  };
  indexed_colors = [
    {
      index = 16;
      color = "0xf78c6c";
    }
    {
      index = 17;
      color = "0xff5370";
    }
    {
      index = 18;
      color = "0x444267";
    }
    {
      index = 19;
      color = "0x32374d";
    }
    {
      index = 20;
      color = "0x8796b0";
    }
    {
      index = 21;
      color = "0x959dcb";
    }
  ];
};
#+end_src
*** qutebrowser Colors

Enable darkmode
#+name: qutebrowser-darkmode
#+begin_src nix
settings.colors.webpage.darkmode.enabled = true;
#+end_src

Colors from base16-qutebrowser (https://github.com/theova/base16-qutebrowser)
Base16 qutebrowser template by theova
Material Palenight scheme by Nate Peterson
#+name: qutebrowser-colors
#+begin_src nix
settings.colors = {
  completion = {
    fg = "#959DCB";
    odd.bg = "#292D3E";
    even.bg = "#292D3E";
    category = {
      fg = "#FFCB6B";
      bg = "#292D3E";
      border.top = "#292D3E";
      border.bottom = "#292D3E";
    };
    item = {
      selected.fg = "#444267";
      selected.bg = "#FFCB6B";
      selected.border.top = "#FFCB6B";
      selected.border.bottom = "#FFCB6B";
      selected.match.fg = "#F07178";
    };
    match.fg = "#C3E88D";
    scrollbar = {
      fg = "#959DCB";
      bg = "#292D3E";
    };
  };
  contextmenu = {
    menu = {
      bg = "#292D3E";
      fg = "#959DCB";
    };
    selected = {
      bg = "#FFCB6B";
      fg = "#444267";
    };
  };
  downloads = {
    bar.bg = "#292D3E";
    start = {
      fg = "#292D3E";
      bg = "#82AAFF";
    };
    stop = {
      fg = "#292D3E";
      bg = "#89DDFF";
    };
    error.fg = "#F07178";
  };
  hints = {
    fg = "#292D3E";
    bg = "#FFCB6B";
    match.fg = "#959DCB";
  };
  keyhint = {
    fg = "#959DCB";
    suffix.fg = "#959DCB";
    bg = "#292D3E";
  };
  messages = {
    error = {
      fg = "#292D3E";
      bg = "#F07178";
      border = "#F07178";
    };
    warning = {
      fg = "#292D3E";
      bg = "#C792EA";
      border = "#C792EA";
    };
    info = {
      fg = "#959DCB";
      bg = "#292D3E";
      border = "#292D3E";
    };
  };
  prompts = {
    fg = "#959DCB";
    border = "#292D3E";
    bg = "#292D3E";
    selected.bg = "#FFCB6B";
  };
  statusbar = {
    normal = {
      fg = "#C3E88D";
      bg = "#292D3E";
    };
    insert = {
      fg = "#292D3E";
      bg = "#82AAFF";
    };
    passthrough = {
      fg = "#292D3E";
      bg = "#89DDFF";
    };
    private = {
      fg = "#292D3E";
      bg = "#676E95";
    };
    command = {
      fg = "#959DCB";
      bg = "#292D3E";
      private = {
        fg = "#959DCB";
        bg = "#292D3E";
      };
    };
    caret = {
      fg = "#292D3E";
      bg = "#C792EA";
      selection = {
        fg = "#292D3E";
        bg = "#82AAFF";
      };
    };
    progress.bg = "#82AAFF";
    url = {
      fg = "#959DCB";
      error.fg = "#F07178";
      hover.fg = "#959DCB";
      success = {
        http.fg = "#89DDFF";
        https.fg = "#C3E88D";
      };
      warn.fg = "#C792EA";
    };
  };
  tabs = {
    bar.bg = "#292D3E";
    indicator = {
      start = "#82AAFF";
      stop = "#89DDFF";
      error = "#F07178";
    };
    odd = {
      fg = "#959DCB";
      bg = "#292D3E";
    };
    even = {
      fg = "#959DCB";
      bg = "#292D3E";
    };
    pinned = {
      even = {
        bg = "#292D3E";
        fg = "#959DCB";
      };
      odd = {
        bg = "#292D3E";
        fg = "#959DCB";
      };
      selected = {
        even = {
          bg = "#292D3E";
          fg = "#959DCB";
        };
        odd = {
          bg = "#292D3E";
          fg = "#959DCB";
        };
      };
    };
    selected = {
      odd = {
        fg = "#FFFFFF";
        bg = "#959DCB";
      };
      even = {
        fg = "#FFFFFF";
        bg = "#959DCB";
      };
    };
  };
}; # }}}
#+end_src
*** mpv background color
Set mpv background color, color used to draw parts of the mpv window not covered by video.
#+name: mpv-background-color
#+begin_src nix
config.background = "#292D3E";
#+end_src
*** zathura colors
Set zathura interface colors
#+name: zathura-colors
#+begin_src nix
default-bg = "#292D3E";
default-fg = "#A6ACCD";
statusbar-bg = "#202331";
statusbar-fg = "#A6ACCD";
inputbar-bg = "#202331";
inputbar-fg = "#A6ACCD";
highlight-color = "#444267";
highlight-active-color = "#82aaff";
#+end_src
Set colors to recolor the document
#+name: zathura-recolor-colors
#+begin_src nix
recolor-lightcolor = "#292D3E";
recolor-darkcolor = "#A6ACCD";
#+end_src
*** bat theme
Set theme name
#+name: bat-theme-config
#+begin_src nix
config.theme = "palenight";
#+end_src

[[bat]] can use Sublime Text 3 themes.
Download theme:
#+name: bat-theme-fetch
#+begin_src nix
themes = {
    palenight = builtins.readFile (
    pkgs.fetchgit
        {
        url = "https://github.com/equinusocio/material-theme";
        rev = "614b7e8bc7369c32e852297d42253643ebf90d55";
        sha256 = "1gjfisksvqa2d08na0yln7yxny4i16wrmvlfnwllbqrgwh26v94g";
        } + "/schemes/Material-Theme-Palenight.tmTheme"
    );
};
#+end_src
*** fzf colors
material-palenight applied to [[fzf]]
#+name: fzf-colors
#+begin_src nix
"--color=bg+:0,bg:#292D3E,spinner:#89DDFF,hl:#82AAFF,fg:#8796B0,header:#82AAFF,info:#FFCB6B,pointer:#89DDFF,marker:#89DDFF,fg+:#959DCB,prompt:#c792ea,hl+:#82AAFF"
#+end_src
*** fish shell colors
#+name: fish-colors
#+begin_src fish
set -U fish_color_autosuggestion 676e95
set -U fish_color_cancel -r
set -U fish_color_command green #white
set -U fish_color_comment 32374D
set -U fish_color_cwd green
set -U fish_color_cwd_root red
set -U fish_color_end brblack #blue
set -U fish_color_error red
set -U fish_color_escape yellow #green
set -U fish_color_history_current --bold
set -U fish_color_host normal
set -U fish_color_match --background=brblue
set -U fish_color_normal normal
set -U fish_color_operator blue #green
set -U fish_color_param 8796B0
set -U fish_color_quote yellow #brblack
set -U fish_color_redirection cyan
set -U fish_color_search_match bryellow --background=32374D
set -U fish_color_selection white --bold --background=32374D
set -U fish_color_status red
set -U fish_color_user brgreen
set -U fish_color_valid_path --underline
set -U fish_pager_color_completion normal
set -U fish_pager_color_description yellow --dim
set -U fish_pager_color_prefix white --bold #--underline
set -U fish_pager_color_progress brwhite --background=cyan
#+end_src
** Fonts
I use
Apple Color Emoji for emojis (can be tested [[https://getemoji.com/][here]])
[[file:pictures/screenshot-emojis.png]]
Gohu Font Nerd Font for nerdfont
[[file:pictures/screenshot-nerdfont.png]]
Spleen as monospaced fixed-pitch font for editor, terminal, etc
San Francisco as variable pitch font
All The Icons is a nerdfont equivalent for emacs.
Noto Fonts CJK is used as Japanese font.

Install fonts:
#+begin_src nix :tangle modules/common/fonts.nix
# This file is generated from "README.org"
{ pkgs, ... }:
{
  fonts = {
    <<system-font-config>>
    <<enable-font-dir>>
    <<enable-ghostscript-fonts>>
    fonts = with pkgs; [
      (nerdfonts.override { fonts = [ "Gohu" ]; })
      unstable.dejavu_fonts
      unstable.spleen
      san-francisco-font
      apple-color-emoji
      noto-fonts-cjk
      emacs-all-the-icons-fonts
    ];
  };
}
#+end_src
*** System font config
Set system-wide monospace/emoji font below. Note that setting emoji here is not sufficient to show emoji properly.
#+name: system-font-config
#+begin_src nix :noweb no-export
    fontconfig = {
      <<fontconfig-enable>>
      <<fontconfig-allowbitmaps>>
      <<use-embedded-bitmaps>>
      defaultFonts = {
        emoji = [ "Apple Color Emoji" ];
        monospace = [ "Spleen" ];
      };
    };
#+end_src
**** Enable fontconfig
If enabled, a fontconfig file will be built pointing to a set of default fonts.
#+name: fontconfig-enable
#+begin_src nix
enable = true;
#+end_src
**** Allow bitmaps
This option is needed to allow usage of bitmap fonts. Like Spleen I use.
#+name: fontconfig-allowbitmaps
#+begin_src nix
allowBitmaps = true;
#+end_src
**** Use embedded bitmaps
This option is necessary to make emacs show unicode emojis properly.
#+name: use-embedded-bitmaps
#+begin_src nix
useEmbeddedBitmaps = true;
#+end_src
**** Enable Font Dir
Create a directory with links to all fonts in ~/run/current-system/sw/share/X11-fonts~
#+name: enable-font-dir
#+begin_src nix
enableFontDir = true;
#+end_src
**** Enable ghost script fonts
Add the fonts provided by Ghostscript to the list of system fonts.
#+name: enable-ghostscript-fonts
#+begin_src nix
enableGhostscriptFonts = true;
#+end_src
*** TTY Font
Console fonts needs to be installed here via ~console.packages~ to be able to set.
#+name: consolefont
#+begin_src nix
packages = with pkgs; [ unstable.spleen ];
font = "spleen-6x12";
#+end_src
*** Alacritty Fonts
I use Spleen font for Alacritty.
The size is in point(pt)
#+name: alacritty-font
#+begin_src nix
font = {
  normal = {
    family = "Spleen";
    style = "Regular";
  };
  bold = {
    family = "Spleen";
    style = "Bold";
  };
  italic = {
    family = "Spleen";
    style = "Regular";
  };
  size = 12;
  offset = {
    x = 0;
    y = 0;
  };
  glyph_offset = {
    x = 0;
    y = 0;
  };
};
#+end_src
*** qutebrowser Fonts
I use Spleen for browser itself's appearance and web fixed font,
San Francisco for most web contents.
The size is in point(pt)
#+name: qutebrowser-fonts
#+begin_src nix
settings.fonts = {
  default_family = "SFNS Display";
  web.family.standard = "SFNS Display";
  web.family.serif = "SFNS Display";
  web.family.sans_serif = "SFNS Display";
  web.family.fixed = "Spleen";
  completion = {
    category = "12pt Spleen";
    entry = "12pt Spleen";
  };
  contextmenu = "12pt Spleen";
  debug_console = "12pt Spleen";
  default_size = "12pt";
  downloads = "12pt Spleen";
  hints = "12pt Spleen";
  keyhint = "12pt Spleen";
  messages = {
    error = "12pt Spleen";
    info = "12pt Spleen";
    warning = "12pt Spleen";
  };
  prompts = "12pt Spleen";
  statusbar = "12pt Spleen";
  tabs.selected = "12pt Spleen";
  tabs.unselected = "12pt Spleen";
  #tabs = "12pt Spleen";
};
#+end_src
*** fontconfig
Font configs that can't be configured using nix options belongs here.
**** 10-symbols.conf
This allows to use nerdfont symbols while using Spleen as font. It's really useful on terminal.
#+begin_src xml :tangle configs/fontconfig/10-symbols.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <alias>
        <family>Spleen</family>
        <prefer>
            <family>GohuFont Nerd Font</family>
        </prefer>
    </alias>
</fontconfig>
#+end_src
**** 65-nonlatin.conf
This configures Japanese font.
This makes programs use *Noto Sans CJK JP* for Japanese automatically. Therefore no need to configure Japanese font as main font.
#+begin_src xml :tangle configs/fontconfig/65-nonlatin.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <!-- Default font for the ja_JP locale (no fc-match pattern) -->
    <match>
        <test compare="contains" name="lang">
            <string>ja</string>
        </test>
        <edit mode="prepend" name="family">
            <string>Noto Sans CJK JP</string>
        </edit>
    </match>
    <alias>
        <family>serif</family>
        <prefer>
            <family>Noto Sans CJK JP</family>
        </prefer>
    </alias>
    <alias>
        <family>sans-serif</family>
        <prefer>
            <family>Noto Sans CJK JP</family>
        </prefer>
    </alias>
    <alias>
        <family>monospace</family>
        <prefer>
            <family>Noto Sans CJK JP</family>
        </prefer>
    </alias>
</fontconfig>
#+end_src

**** 10-prefer-emoji.conf
Seems like this user-level config is needed to programs use Apple Color Emoji for every emojis.
#+begin_src xml :tangle configs/fontconfig/10-prefer-emoji.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <match>
        <edit name="family" mode="prepend">
            <string>Apple Color Emoji</string>
        </edit>
    </match>
</fontconfig>
#+end_src
*** Dunst(Notifications) font
#+name: dunst-font
#+begin_src nix
global.font = "SFNS Display 14";
#+end_src
** Wallpaper
Desktop wallpaper ~pictures/wallpaper1.png~
#+ATTR_HTML: :width 300
#+ATTR_ORG: :width 300
[[file:pictures/wallpaper1.png]]
Lock screen wallpaper ~pictures/wallpaper2.png~
[[file:pictures/wallpaper2.png]]
*** Wallpaper files
Put (symlink) files into /etc. It makes easy to set wallpapers from any machines.
#+name: etc-wallpaper-files
#+begin_src nix
"wallpapers/wallpaper1.png".source = ../../pictures/wallpaper1.png;
"wallpapers/wallpaper2.png".source = ../../pictures/wallpaper2.png;
"wallpapers/wallpaper2-1080.png".source = ../../pictures/wallpaper2-1080.png;
#+end_src
*** Lock screen
Set 1440p lock screen wallpaper
#+name: lightdm-wallpaper
#+begin_src nix
background-image = "/etc/wallpapers/wallpaper2.png"
#+end_src

Set a 1080p equivalent
#+name: lightdm-fhd-wallpaper
#+begin_src nix
background-image = "/etc/wallpapers/wallpaper2-1080.png"
#+end_src
** Icons
** Cursors
*** Alacritty cursor
#+name: alacritty-cursor
#+begin_src nix
cursor = {
style = "Beam";
};
#+end_src
** Opacity
#+ATTR_HTML: :width 300
#+ATTR_ORG: :width 300
[[file:pictures/screenshot-opacity.png]]
Programs that doesn't have opacity option, or the opacity option doesn't work great(like PGTK emacs) can be set opacity using picom with following code:
#+name: picom-opacity
#+begin_src nix
opacityRule = [
    "80:class_g  = 'Zathura'"
    "80:class_g  = 'TelegramDesktop'"
    "80:class_g  = 'Discord'"
    "80:class_g  = 'Emacs'"
    "100:class_g = 'keynav'"
];
#+end_src
*** Blur
Configure blur method and strength for translucent programs.
I use dual kawase blur.
#+name: picom-blur
#+begin_src nix
blur:
{
    method = "kawase";
    strength = 8;
    background = false;
    background-frame = false;
    background-fixed = false;
};
#+end_src
*** Blur exclude
Set programs to exclude from background blur here.
Exclude keynav because it's not intended to be recognized as window and it becomes buggy.
#+name: picom-blur-exclude
#+begin_src nix
blur-background-exclude = [
    "class_g = 'keynav'"
];
#+end_src
*** Alacritty opacity
Set Alacritty opacity.
Window opacity as a floating point number from ~0.0~ to ~1.0~
The value ~0.0~ is completely transparent and ~1.0~ is opaque.
#+name: alacritty-opacity
#+begin_src nix
background_opacity = 0.8;
#+end_src
** Border
[[file:pictures/screenshot-border.png]]
*** Enable rounded borders
Enable rounded borders in picom
#+name: picom-enable-rounded-borders
#+begin_src nix
round-borders = 1;
#+end_src
*** Corner radius
Set window corner radius
#+name: picom-corner-radius
#+begin_src nix
corner-radius = 5;
#+end_src
*** Rounded corner exclude
Programs to exclude from rounded corners.
Exclude keynav and dock, full screen programs.
#+name: picom-rounded-corners-exclude
#+begin_src nix
rounded-corners-exclude = [
    "window_type = 'dock'",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_FULLSCREEN'",
    "class_g = 'keynav'",
];
#+end_src
*** Rounded borders exclude
Exclude programs from rounded borders.
Exclude keynav because it's not intended to be recognized as window and it becomes buggy.
#+name: picom-round-borders-exclude
#+begin_src nix
round-borders-exclude = [
    "class_g = 'keynav'"
];
#+end_src
* Terminal/Shell
** Alacritty
Alacritty is a GPU-accelerated terminal emulator, written in Rust.
I use as default terminal.
[[https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/alacritty-term%2Bscanlines.svg]]
+ [[Alacritty Colors][Colors]]
+ [[Alacritty Fonts][Fonts]]
#+begin_src nix :tangle modules/terminal/alacritty.nix :noweb no-export
# This file is generated from "README.org"
{
  programs.alacritty = {
    <<alacritty-enable>>
    settings = {
      <<alacritty-enable-true-color>>
      <<alacritty-window-padding>>
      <<alacritty-window-dynamicpadding>>
      <<alacritty-window-decorations>>
      <<alacritty-window-startup-mode>>
      <<alacritty-scrolling>>
      <<alacritty-font>>
      <<alacritty-boldtext-bright-colors>>
      <<alacritty-opacity>>
      <<alacritty-keybinds>>
      <<alacritty-custom-cursor-colors>>
      <<alacritty-cursor>>
      <<alacritty-colors>>
    };
  };
}
#+end_src
*** Install Alacritty
Whether to enable Alacritty
#+name: alacritty-enable
#+begin_src nix
enable = true;
#+end_src
*** Enable true color
xterm-256color describes Xterm with support for 256 colors enabled.
set TERM environment variable.
#+name: alacritty-enable-true-color
#+begin_src nix
env.TERM = "xterm-256color";
#+end_src
*** Alacritty padding
Blank space added around the window in pixels.
#+name: alacritty-window-padding
#+begin_src nix
window.padding = {
    x = 12;
    y = 0;
};
#+end_src
Dynamic padding
#+name: alacritty-window-dynamicpadding
#+begin_src nix
window.dynamic_padding = false;
#+end_src
*** Window decorations
- full : Borders and title bar
- none: Neither borders nor title bar
#+name: alacritty-window-decorations
#+begin_src nix
window.decorations = "none";
#+end_src
*** Window startup mode
- Windowed
- Maximized
- Fullscreen
#+name: alacritty-window-startup-mode
#+begin_src nix
window.startup_mode = "Windowed";
#+end_src
*** Scrolling
History sets maximum number of lines in the scrollback buffer.
Multiplier sets scrolling distance multiplier.
#+name: alacritty-scrolling
#+begin_src nix
scrolling = {
    history = 10000;
    multiplier = 3;
};
#+end_src
*** Draw bold text with bright colors
If ~true~, bold text is drawn using the bright color variants.
Maybe usable for bitmap fonts?
#+name: alacritty-boldtext-bright-colors
#+begin_src nix
draw_bold_text_with_bright_colors = true;
#+end_src
*** Key bindings
~C-S-c~ to copy, ~C-S-v~ to paste
~C-S-Up~ to scroll upwards.
~C-S-Down~ to scroll downwards.
#+name: alacritty-keybinds
#+begin_src nix
      key_bindings = [
        {
          key = "V";
          mods = "Control|Shift";
          action = "Paste";
        }
        {
          key = "C";
          mods = "Control|Shift";
          action = "Copy";
        }
        {
          key = "Up";
          mods = "Control|Shift";
          action = "ScrollPageUp";
        }
        {
          key = "Down";
          mods = "Control|Shift";
          action = "ScrollPageDown";
        }
      ];
#+end_src
** TTY
Configure TTY console.
+ [[Console Colors][Colors]]
+ [[TTY Font][Font]]
+ [[Dvorak][Layout]]

#+begin_src  nix :tangle modules/common/console.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  console = {
    <<consolecolors>>
    <<consoleearlysetup>>
    <<consolefont>>
    <<consolekeymap>>
  };
}
#+end_src

*** Early Setup
Load console configurations early at initrd
#+name: consoleearlysetup
#+begin_src nix
earlySetup = true;
#+end_src
** fish shell
fish is a Unix shell that attempts to be more interactive and user-friendly
#+begin_src nix :tangle modules/terminal/fish.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:

{
  programs.fish = {
    <<fish-enable>>

    shellAbbrs = {
      <<fish-common-abbrs>>
      <<fish-lazygit>>
      <<fish-sshadd-git>>
      <<fish-git-abbrs>>
      <<fish-screenshots>>
      <<fish-programs>>
      <<fish-nixos>>
      <<fish-misc-commands>>
    };

    plugins =
      [
        <<fish-plugin-z>>
        <<fish-plugin-ssh-agent>>
      ];

    interactiveShellInit = ''
      <<fish-vi-binds>>
      <<fish-greeting>>
      <<fish-esc-delay>>
      <<fish-colors>>
      <<fish-lazygit-neovim>>
      <<fish-direnv>>
      # vifm image preview
      alias vifm="bash -c 'vifmrun'"

    '';
  };

}
#+end_src
*** Enable fish
Turn on to install fish shell
#+name: fish-enable
#+begin_src nix
enable = true;
#+end_src
*** Abbreviations
**** Common commands

#+name: fish-common-abbrs
#+begin_src nix :noweb no-export
<<fish-clear>>
<<fish-lsd>>
<<fish-sudoedit>>
<<fish-bat>>
<<fish-diff>>
<<fish-tar>>
<<fish-uefi>>
#+end_src

clear the terminal with *c*
#+name: fish-clear
#+begin_src nix
"c" = "clear";
#+end_src

As I use Dvorak, it's really painful to type *ls* with pinky everytime. I use *s* and equivalents instead.
I use [[lsd]] instead of ls command
#+name: fish-lsd
#+begin_src nix
"s" = "lsd";
"sa" = "lsd -aF";
"ss" = "lsd -alF";
#+end_src

sudoedit
#+name: fish-sudoedit
#+begin_src nix
"suv" = "sudoedit";
#+end_src

Use [[bat]] instead of cat command
#+name: fish-bat
#+begin_src nix
"cat" = "bat";
#+end_src

Use diff-so-fancy instead of diff command
#+name: fish-diff
#+begin_src nix
"diff" = "diff-so-fancy";
#+end_src

Turn colorization on always for tree command
#+name: fish-tree
#+begin_src nix
"tree" = "tree -C";
#+end_src


Extract tar easier
#+name: fish-tar
#+begin_src nix
"untar" = "tar -xvzf";
#+end_src

Restart to uefi easier
#+name: fish-uefi
#+begin_src nix
"uefi" = "systemctl reboot --firmware-setup";
#+end_src

**** Commands to launch programs
#+name: fish-programs
#+begin_src nix :noweb no-export
<<fish-editors>>
<<fish-btm>>
<<fish-vifm>>
<<fish-ncpamixer>>
#+end_src

Launch editors from terminal easier
#+name: fish-editors
#+begin_src nix
"v" = "nvim";
"em" = "emacsclient -c";
#+end_src

Use bottom instead of top
#+name: fish-btm
#+begin_src nix
"top" = "btm";
#+end_src

vifm(filemanager)
#+name: fish-vifm
#+begin_src nix
"vf" = "vifm";
#+end_src

ncpamixer(TUI pulseaudio mixer)
#+name: fish-ncpamixer
#+begin_src nix
"ncpa" = "ncpamixer";
#+end_src
**** Git commands

lazygit(terminal Git UI)
#+name: fish-lazygit
#+begin_src nix
"lg" = "lazygit";
#+end_src

Add GitHub SSH key to SSH agent
#+name: fish-sshadd-git
#+begin_src nix
"sshgit" = "ssh-add ~/.ssh/githubkey";
#+end_src

Typical command line Git abbrs
#+name: fish-git-abbrs
#+begin_src nix
"g" = "git";
"ga" = "git add";
"gall" = "git add --all";
"gc" = "git clone";
"gmc" = "gitmoji -c";
"gco" = "git commit";
"gp" = "git push";
"gb" = "git branch";
"gd" = "git diff";
"gdst" = "git diff --staged";
"gst" = "git status";
"gch" = "git checkout";
"gf" = "git fetch";
"gmv" = "git mv";
"gl" = "git log --graph --color=always";
"glo" = "git log --graph --color=always --oneline";
#+end_src
**** Screenshot commands
Take screenshot and copy to clipboard
#+name: fish-screenshots
#+begin_src nix
"scrotclipsel" = "scrot -s ~/tmp.png && xclip -selection clipboard -t image/png -i ~/tmp.png && rm ~/tmp.png";
"scrotclip" = "scrot ~/tmp.png && xclip -selection clipboard -t image/png -i ~/tmp.png && rm ~/tmp.png";
#+end_src
**** NixOS commands
Commands for Nix package manager

#+name: fish-nixos
#+begin_src nix
"nixre" = "doas nixos-rebuild switch --flake";
"nixrt" = "doas nixos-rebuild test --flake";
"dnixtrash" = "doas nix-collect-garbage -d";
"nixtrash" = "nix-collect-garbage -d";
#+end_src
**** Misc commands
#+name: fish-misc-commands
#+begin_src nix
"tty-clock" = "tty-clock -C 1 -c";
"rickroll" = "curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash";
#+end_src
*** Plugins
Z is a replacement for cd that learns your habit, tracks the directories you visit to make you jump to the directory you frequently use easier
#+name: fish-plugin-z
#+begin_src nix
{
    name = "z";
    src = pkgs.fetchFromGitHub {
    owner = "jethrokuan";
    repo = "z";
    rev = "ddeb28a7b6a1f0ec6dae40c636e5ca4908ad160a";
    sha256 = "0c5i7sdrsp0q3vbziqzdyqn4fmp235ax4mn4zslrswvn8g3fvdyh";
    };
}
#+end_src

Integrate SSH agent with fish shell
#+name: fish-plugin-ssh-agent
#+begin_src nix
{
    name = "fish-ssh-agent";
    src = pkgs.fetchFromGitHub {
    owner = "danhper";
    repo = "fish-ssh-agent";
    rev = "ce90d80aa9549c626f9c5fc5a964536de015a192";
    sha256 = "03zj5g7dxkhqpp9lijxxlnyx4cc7nqpapj5iqfv7swavyximicyi";
    };
}
#+end_src
*** Enable vi key bindings
#+name: fish-vi-binds
#+begin_src fish
fish_vi_key_bindings
#+end_src
*** Startup message
Disable fish shell startup message
#+name: fish-greeting
#+begin_src fish
set fish_greeting
#+end_src
*** Esc key delay
Set esc key delay
#+name: fish-esc-delay
#+begin_src fish
set -U fish_escape_delay_ms 10
#+end_src
** starship
starship is a minimal, blazing fast, and infinitely customizable prompt for any shell
#+begin_src nix :tangle modules/terminal/starship.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  programs.starship = {
    <<starship-enable>>
    enableFishIntegration = true;
    package = pkgs.unstable.starship;
    settings = {
      add_newline = true;

      character = {
        success_symbol = "[𝝺](#c792ea)";
        vicmd_symbol = "[ ](bold green)";
        error_symbol = "[☓ ](bold red)";
      };

      directory = {
        style = "bold cyan";
      };

      nix_shell = {
        disabled = false;
        symbol = " ";
      };

    };
  };
}
#+end_src
*** Enable starship
Turn on to install starship
#+name: starship-enable
#+begin_src nix
enable = true;
#+end_src
** Git
This directory is a git repository, nixpkgs is a git repository, Emacs, Linux is developed in git repository, most free(as in freedom) softwares uses Git nowadays.
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
#+begin_src nix :tangle modules/terminal/git.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  programs.git = {
    <<git-enable>>
    <<git-package>>
    <<git-default-branch>>
    <<git-push-ssh>>
    <<git-name-mail>>
  };
}
#+end_src
*** Enable Git
Turn on to install Git
#+name: git-enable
#+begin_src nix
enable = true;
#+end_src
*** Git Package
I use Git from nixos-unstable
#+name: git-package
#+begin_src nix
package = pkgs.unstable.git;
#+end_src
*** Git Default Branch
Many communities are renaming Default Git Branch from ~master~ to ~main~ to remove racially-charged language from software.
[[https://github.com/github/renaming][github/renaming]]
[[https://www.zdnet.com/article/github-to-replace-master-with-alternative-term-to-avoid-slavery-references/][Github to replace "master" with alternative term to avoid slavery references]]
It's very easy to do that on user-level. Why not start using main from today? There aren't any reason to not start using ~main~ for new personal projects.
#+name: git-default-branch
#+begin_src nix
extraConfig.init.defaultBranch = "main";
#+end_src
*** Use SSH only when pushing
I use SSH to push into Git repository.
This config Git default to SSH to push.
Note that it is ~pushinsteadOf~
If you use just ~insteadOf~, it will ask SSH key even when cloning.

#+name: git-push-ssh
#+begin_src nix
extraConfig.url."git@github.com:" = {
    pushinsteadOf = "https://github.com/";
};
#+end_src
*** User name,Email
Git uses email to identify your commits, and associate commits with your accounts e.g. GitHub GitLab
Email and User Name will be visible in any your commits.
If you want to keep your real name private, use any text like GitHub user name.
To GitHub/GitLab be able to associate your commits with your accounts, you have to either:
- Use your real mail address register on GitHub/GitLab
- Use noreply mail addres
I'm still not ready to migrate to GitLab, so I use GitHub noreply mail address
#+name: git-name-mail
#+begin_src nix
userName = "btwiusegentoo";
userEmail = "66811008+btwiusegentoo@users.noreply.github.com";
#+end_src
** bat
A cat Linux command clone with syntax highlighting and Git integration
+ [[bat theme][Theme]]
#+begin_src nix :tangle modules/terminal/bat.nix
# This file is generated from "README.org"
{ pkgs, ... }:

{
  programs.bat = {
    <<bat-enable>>
    <<bat-italic-text>>
    <<bat-theme-config>>
    <<bat-theme-fetch>>
  };
}
#+end_src
*** Enable bat
Turn on to install bat
#+name: bat-enable
#+begin_src nix
enable = true;
#+end_src
*** Use italic text on the terminal
(Note, it isn't supported on all terminals)
#+name: bat-italic-text
#+begin_src nix
config.italic-text = "always";
#+end_src
*** Customize bat style
Show line numbers, Git modifications and file header
#+name: bat-style
#+begin_src nix
config.style = "numbers,changes,header";
#+end_src
** fzf
fzf is a general-purpose command line fuzzy finder.
+ [[fzf colors][Colors]]
#+begin_src nix :tangle modules/terminal/fzf.nix :noweb no-export
# This file is generated from "README.org"
{
  programs.fzf = {
    <<fzf-enable>>
    <<fzf-fish-integration>>
    <<fzf-use-fd>>

    defaultOptions = [
      <<fzf-colors>>
    ];

  };
}
#+end_src
*** Enable fzf
Turn on to install fzf
#+name: fzf-enable
#+begin_src nix
enable = true;
#+end_src
*** Fish shell integration
Turn on to enable fish shell integration.
Most usable one is <C-t> to search current directory.
#+name: fzf-fish-integration
#+begin_src nix
enableFishIntegration = true;
#+end_src
*** Use fd instead of default find
Requires fd installed.
It is faster than default find
#+name: fzf-use-fd
#+begin_src nix
defaultCommand = "fd --type f";
#+end_src
** lsd
Simply put, lsd is a better ~ls~ command with colors, nerdfont icons, written in Rust
#+begin_src nix :tangle modules/terminal/lsd.nix :noweb no-export
# This file is generated from "README.org"
{
  programs.lsd = {
    <<lsd-enable>>
    <<lsd-aliases>>
  };
}
#+end_src
*** Enable lsd
Enable to install lsd
#+name: lsd-enable
#+begin_src nix
enable = true;
#+end_src
*** lsd aliases
Turn on to enable lsd aliases.
I want to use my own aliases, so I disable it.
#+name: lsd-aliases
#+begin_src nix
enableAliases = false;
#+end_src
** TODO tmux
#+begin_src nix :tangle modules/terminal/tmux.nix :noweb no-export
{ pkgs, ... }:

{
  programs.tmux = {
    enable = true;
    plugins = with pkgs; [
      tmuxPlugins.vim-tmux-navigator
      tmuxPlugins.prefix-highlight
    ];
    keyMode = "vi";
    extraConfig = ''
      set-option -g default-terminal "screen-256color"
      set -ga terminal-overrides ",*256col*:Tc"
      set-option -g prefix C-Space
      bind C-Space send-prefix
      bind s split-window -h
      bind v split-window -v
      source-file ./.palenight-tmux
    '';
  };
}
#+end_src
* Web Browser
** qutebrowser
[[https://raw.githubusercontent.com/qutebrowser/qutebrowser/master/icons/qutebrowser-64x64.png]]
I use qutebrowser as main browser.
qutebrowser is a keyboard-focused(Vim-style key bindings) browser with a minimal GUI based on Chromium(qtwebengine).
+ [[qutebrowser Colors][Colors]]
+ [[qutebrowser Fonts][Fonts]]
#+begin_src nix :tangle modules/gui/qutebrowser.nix :noweb no-export
# This file is generated from "README.org"
{
  programs.qutebrowser = {
    <<qutebrowser-enable>>
    <<qutebrowser-searchengine>>
    <<qutebrowser-gpu-acceleration>>
    <<qutebrowser-mpv>>
    <<qutebrowser-mpv-hint>>
    <<qutebrowser-start-page>>
    <<qutebrowser-default-zoom>>
    <<qutebrowser-fonts>>
    <<qutebrowser-darkmode>>
    <<qutebrowser-colors>>
    <<qutebrowser-history-max-completion>>
    extraConfig = ''
      <<qutebrowser-emacs-editor>>
    '';

  };
}
#+end_src
*** Install qutebrowser
Turn on this option to install qutebrowser
#+name: qutebrowser-enable
#+begin_src nix
enable = true;
#+end_src
*** Search engine
While the default option (DuckDuckGo) is great, I'm still not ready to switch to it.
So, I choose to use Google as default search engine
qutebrowser can set multiple search engines, but I don't use it.
#+name: qutebrowser-searchengine
#+begin_src nix
searchEngines = {
    DEFAULT = "https://google.com/search?q={}";
};
#+end_src
*** GPU acceleration
Idk why, these gpu acceleration flags are disabled in qtwebengine by default (See [[https://github.com/qutebrowser/qutebrowser/issues/5378][Issue 5378]])
These flags makes a significant difference in perfomance, CPU usage, and battery life. Especially usable for laptop. Enable it.
#+name: qutebrowser-gpu-acceleration
#+begin_src nix
settings.qt.args = [ "enable-native-gpu-memory-buffers" "enable-gpu-rasterization" "use-gl=egl" "ignore-gpu-blacklist" "num-raster-threads=4" ];
#+end_src
*** Youtube playback with mpv
Youtube video uses vp9 codec nowadays, that can't be playbacked in Linux with GPU acceleration.
That can be workaronuded by using Plugin to force h264 in Firefox.
But, qutebrowser can't. So, just play the video in mpv as alternative workaround.
Press ~yd~ to open current youtube video URL in mpv
#+name: qutebrowser-mpv
#+begin_src nix
keyBindings.normal."yd" = "spawn mpv --ytdl-format='bestvideo[height<=?1080][vcodec!=vp9]+bestaudio/best' {url}";
#+end_src
Or, ~yf~ use hints to select and open youtube video in mpv
#+name: qutebrowser-mpv-hint
#+begin_src nix
keyBindings.normal."yf" = "hint links spawn mpv --ytdl-format='bestvideo[height<=?1080][vcodec!=vp9]+bestaudio/best' --force-window yes {hint-url}";
#+end_src
*** Qutebrowser start page
Set my own start page
#+name: qutebrowser-start-page
#+begin_src nix
settings.url.start_pages = [ "https://btwiusegentoo.github.io/start.html" ];
settings.url.default_page = "https://btwiusegentoo.github.io/start.html";
#+end_src
*** Max completion history items
Set qutebrowser max completion items from history to 30
#+name: qutebrowser-history-max-completion
#+begin_src nix
settings.completion.web_history.max_items = 30;
#+end_src
*** Default zoom
Even with 1080p xrandr scale in laptop or 1440p xrandr scale in desktop, I feel everything is too big(possibly I'm weird)
So I have to set default zoom to 90%
#+name: qutebrowser-default-zoom
#+begin_src nix
settings.zoom.default = "90%";
#+end_src
*** Edit text on qutebrowser using emacs
You can write text in qutebrowser using emacs.
This is really useful when using Reddit, or writing GitHub issue,etc.
Emacs daemon have to be running.
#+name: qutebrowser-emacs-editor
#+begin_src python :tangle no
c.editor.command = ["emacsclient", "-c", "--eval", "(find-file \"{}\")", "(org-mode)"]
#+end_src
** Firefox
[[https://3u26hb1g25wn1xwo8g186fnd-wpengine.netdna-ssl.com/files/2019/10/logo-firefox.svg]]
Firefox is my backup browser.
I Use for certain websites that qutebrowser can't access(like widevine websites in NixOS), or games, etc.
#+begin_src nix :tangle modules/gui/firefox.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  programs.firefox = {
    <<firefox-enable>>
    <<firefox-package>>
    <<firefox-extensions>>
    profiles = {
      default = {
        isDefault = true;
        name = "Default";
        settings = {
          <<firefox-startpage>>
          <<firefox-search-isus>>
        };
      };
    };
  };
}
#+end_src
*** Install Firefox
Turn on to install Firefox
#+name: firefox-enable
#+begin_src nix
enable = true;
#+end_src
*** Firefox package
I like to use Firefox from nixpkgs-unstable
#+name: firefox-package
#+begin_src nix
package = pkgs.unstable.firefox;
#+end_src
*** Extensions
Extensions to install goes here:
#+name: firefox-extensions
#+begin_src nix :noweb no-export
extensions = with pkgs.nur.repos.rycee.firefox-addons; [
  <<firefox-tridactyl-install>>
  ublock-origin
];
#+end_src
*** Tridactyl
[[https://raw.githubusercontent.com/tridactyl/tridactyl/master/src/static/logo/Tridactyl_64px.png]]
Tridactyl is a Firefox plugin that provides Vim key bindings. Makes Firefox usable.
Replaces Firefox’s control mechanism with one modelled on Vim.

Let's install it:
#+name: firefox-tridactyl-install
#+begin_src nix
tridactyl
#+end_src

**** TODO Configuration
Idk why, file based configuration doesn't work now.
#+name: tridactylrc
#+begin_src vimrc :tangle no

" Remove local config
sanitise tridactyllocal tridactylsync

" Adjust scroll speed
bind j scrollline -2
bind k scrollline 2
" Set tab move direction same as qutebrowser
bind J tabnext
bind K tabprev
" Use qutebrowser like behavior for new tab :open
bind O fillcmdline tabopen
#+end_src
Install tridactyl configuration into ~$HOME/.config/tridactyl/tridactylrc~
#+name: tridactylrc-symlink
#+begin_src nix
"tridactyl/tridactylrc".text = ''
    <<tridactylrc>>
'';
#+end_src

*** Start page
Set my own startpage
#+name: firefox-startpage
#+begin_src nix
"browser.startup.homepage" = "https://btwiusegentoo.github.io/start.html";
#+end_src
*** Use US google search engine
#+name: firefox-search-isus
#+begin_src nix
"browser.search.isUS" = true;
#+end_src
* Multimedia
** PulseAudio
[[https://www.freedesktop.org/software/pulseaudio/logo.png]]
PulseAudio is a general purpose sound server intended to run as a middleware between your applications and your hardware devices, either using ALSA or OSS.
It's required by many programs to play sound nowadays.
#+begin_src nix :tangle modules/services/pulseaudio.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  hardware.pulseaudio = {
    <<pulseaudio-enable>>
    <<pulseaudio-package>>
    <<pulseaudio-support-32bit>>
    <<pulseaudio-extramodules>>
    <<pulseaudio-daemon-config>>
  };
}
#+end_src
*** Enable PulseAudio
Whether to enable the PulseAudio sound server.
#+name: pulseaudio-enable
#+begin_src nix
enable = true;
#+end_src
*** PulseAudio 32bit support
Include 32-bit pulseaudio libraries in the system. It's needed by certain programs(like wine 32bit, mainly used for games)
#+name: pulseaudio-support-32bit
#+begin_src nix
support32Bit = true;
#+end_src
*** PulseAudio package
Select the PulseAudio derivation to use. This can be used to enable features (such as JACK support, Bluetooth) via the pulseaudioFull package
#+name: pulseaudio-package
#+begin_src nix
package = pkgs.pulseaudioFull;
#+end_src
*** PulseAudio extra modules
Extra PulseAudio modules to use. This is intended for out-of-tree pulseaudio modules like extra bluetooth codecs.
#+name: pulseaudio-extramodules
#+begin_src nix
extraModules = [ pkgs.pulseaudio-modules-bt ];
#+end_src
*** PulseAudio daemon config
idk, this config is supposed to improve audio quality
#+name: pulseaudio-daemon-config
#+begin_src nix
daemon.config = {
    default-sample-rate = "48000";
    alternate-sample-rate = "44100";
    default-sample-channels = "2";
    default-channel-map = "front-left,front-right";
    default-fragments = "2";
    default-fragment-size-msec = "125";
    enable-lfe-remixing = "no";
    high-priority = "yes";
    nice-level = "-11";
    realtime-scheduling = "yes";
    realtime-priority = "9";
    rlimit-rtprio = "9";
    resample-method = "soxr-vhq";
    daemonize = "no";
    default-sample-format = "float32le";
};
#+end_src
** mpv
[[https://raw.githubusercontent.com/mpv-player/mpv.io/master/source/images/mpv-logo-128.png]]
mpv is a FOSS, lightweight command line media player. It supports a wide variety of media file formats.
I mostly use it to play Youtube videos [[Youtube playback with mpv][spawning from qutebrowser]] , Thanks to [[ https://github.com/ytdl-org/youtube-dl][youtube-dl]]
+ [[mpv background color][Background Color]]
#+begin_src nix :tangle modules/gui/mpv.nix :noweb no-export
# This file is generated from "README.org"
{
  programs.mpv = {
    <<mpv-install>>
    <<mpv-background-color>>
    <<mpv-hardware-decoding>>
    <<mpv-bindings>>
  };
}
#+end_src
*** Install mpv
Turn on to install mpv
#+name: mpv-install
#+begin_src nix
enable = true;
#+end_src
*** Enable hardware decoding
Hardware decoding is not enabled by default because it's likely to cause issues like tearing, stutter, etc on Low Power GPUs
My GPUs are totally fine. Enable it:
#+name: mpv-hardware-decoding
#+begin_src nix
config.hwdec = "auto";
config.hwdec-codecs = "all";
#+end_src
*** mpv default volume
Set the startup volume. 0 means silence, 100 means no volume reduction or ampififacion.
Negative values can be passed for compatibility, but are treated as 0.
#+name: mpv-default-volume
#+begin_src nix
config.volume = 80;
#+end_src
*** mpv key bindings
Even though I use [[Dvorak]], I'm vim keybinding user.
*hjkl* feels much better than arrow key.
It's a great idea to control volume and seek video/music with *hjkl*
*l* already have set to ab-loop for default. So I have to change it.
#+name: mpv-bindings
#+begin_src nix
bindings = {
    h = "seek -10";
    j = "add volume -2";
    k = "add volume 2";
    l = "seek 10";
    "Ctrl+l" = "ab-loop";
};
#+end_src
** zathura
zathura is a highly customizable and functional document viewer based on the girara user interface library and several document libraries.
+ [[zathura colors][Colors]]
#+begin_src nix :tangle modules/gui/zathura.nix :noweb no-export
# This file is generated from "README.org"
{
  programs.zathura = {
    <<zathura-enable>>
    options = {
      <<zathura-recolor>>
      <<zathura-recolor-colors>>
      <<zathura-colors>>
    };
  };
}
#+end_src
*** Enable zathura
Turn on to install zathura
#+name: zathura-enable
#+begin_src nix
enable = true;
#+end_src
*** Recolor
Turn on to recolor the document
#+name: zathura-recolor
#+begin_src nix
recolor = "true";
#+end_src
* neovim
** Open lazygit commit window inside neovim
#+name: fish-lazygit-neovim
#+begin_src fish
# Open lazygit commit window inside neovim
if [ -n "$NVIM_LISTEN_ADDRESS" ];
    alias nvim="nvr -cc split --remote-wait +'set bufhidden=wipe'"
end

if [ -n "$NVIM_LISTEN_ADDRESS" ];
    export VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
else
    export VISUAL="nvim"
    export EDITOR="nvim"
end
#+end_src
* Security
** doas
The *doas* utility is a program originally written for OpenBSD, that can be used as alternative for *sudo*
The following code disables *sudo*, enables *doas*, permits ~@wheel~ group users to use doas with password.
~keepEnv~ makes retain the environment variables when creating the environment for the new process.
~persist~ means it literally. After running doas successfully, do not ask password again for some time.
#+begin_src nix :tangle modules/common/doas.nix
# This file is generated from "README.org"
{
  security.sudo.enable = false;
  security.doas = {
    enable = true;
    wheelNeedsPassword = true;
    extraRules = [
      { groups = [ "wheel" ]; noPass = false; keepEnv = true; persist = true; }
    ];
  };
}
#+end_src

** ClamAV
Clam AntiVirus is a FOSS antivirus software toolkit able to detect many types of malicious software, including viruses.
#+begin_src nix :tangle modules/services/clamav.nix :noweb no-export
# This file is generated from "README.org"
{
  services.clamav.daemon = {
    <<clamav-daemon-enable>>
    <<clamav-daemon-config>>
  };
  services.clamav.updater = {
    <<clamav-updater-enable>>
    <<clamav-updater-frequency>>
    <<clamav-updater-interval>>
    <<clamav-updater-config>>
  };
}
#+end_src
*** Enable ClamAV daemon
#+name:clamav-daemon-enable
#+begin_src nix
enable = true;
#+end_src
*** ClamAV daemon configs
#+name: clamav-daemon-config
#+begin_src nix
extraConfig = ''

'';
#+end_src
*** Enable ClamAV updater
Enable ClamAV freshclam updater
#+name: clamav-updater-enable
#+begin_src nix
enable = true;
#+end_src
*** ClamAV update frequency
Number of database checks per day
#+name: clamav-updater-frequency
#+begin_src nix
frequency = 24;
#+end_src
*** ClamAV updater interval
How often freshclam is invoked
#+name: clamav-updater-interval
#+begin_src nix
interval = "hourly";
#+end_src
*** ClamAV updater configs
#+name: clamav-updater-config
#+begin_src nix
extraConfig = ''

'';
#+end_src
** GnuPG
GnuPG is a complete and free implementation of the OpenPGP standard.
GnuPG allows to encrypt and sign your data and communication, features a versatile key management system as well as access modules for all kinds of public key directories.
#+begin_src nix :tangel modules/services/gpg.nix :noweb no-export
# This file is generated from "README.org"
{
  services.gpg-agent = {
    <<gpg-agent-enable>>
    <<gpg-agent-ssh>>
    <<gpg-agent-grabkbmouse>>
    <<gpg-agent-pinentry-flavor>>
  };
  programs.gpg = {
    <<gpg-enable>>
    <<gpg-settings>>
  };
}
#+end_src
*** Enable GPG
Install GnuPG
#+name: gpg-enable
#+begin_src nix
enable = true;
#+end_src
*** GPG settings
#+name: gpg-settings
#+begin_src nix
settings = {
};
#+end_src
*** Enable GPG agent
whether to install GnuPG private key agent
#+name: gpg-agent-enable
#+begin_src nix
enable = true;
#+end_src
*** Enable SSH support
Use GPG agent for SSH keys
#+name: gpg-agent-ssh
#+begin_src nix
enableSshSupport = true;
#+end_src
*** Grab the keyboard and mouse
Tell the pinentry to grab the keyboard and mouse. This option should in general be used to avoid X-sniffing attacks.
#+name: gpg-agent-grabkbmouse
#+begin_src nix
grabKeyboardAndMouse = true;
#+end_src
*** Select pinentry interface
Use "curses" to be able to use GPG-agent without X11
#+name: gpg-agent-pinentry-flavor
#+begin_src nix
pinentryFlavor = "curses";
#+end_src
* Common configs
** X server
This module configures common stuff of xserver and displaymanager.
Change layout [[#dvorak][here]] and repeat rate [[#xorg-repeat-rate][here]]

Enable xserver
#+name: xserver-enable
#+begin_src nix
enable = true;
#+end_src

Auto start xserver
#+name: xserver-autorun
#+begin_src nix
autorun = true;
#+end_src

Xorg dpi
#+name: xserver-dpi
#+begin_src nix
dpi = 96;
#+end_src

Following code goes to ~xserver.nix~ file
#+begin_src  nix :tangle modules/common/xserver.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, config, ... }:
{
  services.xserver = {
    <<xserver-enable>>
    <<xserver-autorun>>
    <<xserver-keymap>>
    <<xserver-autorepeat>>
    <<xserver-dpi>>
    desktopManager.session = [
      {
        name = "home-manager";
        start = ''
          ${pkgs.runtimeShell} $HOME/.hm-xsession &
          waitPID=$!
        '';
      }
    ];
    <<xserver-lightdm>>
  };
}
#+end_src

And this is for laptop
#+begin_src  nix :tangle modules/common/xserverlaptop.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, config, ... }:
{
  services.xserver = {
    <<xserver-enable>>
    <<xserver-autorun>>
    <<xserver-keymap>>
    <<xserver-autorepeat>>
    <<xserver-dpi>>
    desktopManager.session = [
      {
        name = "home-manager";
        start = ''
          ${pkgs.runtimeShell} $HOME/.hm-xsession &
          waitPID=$!
        '';
      }
    ];
    <<xserver-lightdm-laptop>>
  };
}
#+end_src
** LightDM
The following code configures lightdm with mini greeter.
I use LightDM because mini greeter is minimal, and it's easy to use as lockscreen with ~light-locker~.
[[#lightdm-colors][Colors]]
[[#lock-screen][Wallpaper]]
#+name: xserver-lightdm
#+begin_src nix :noweb no-export
displayManager = {
    lightdm = {
    enable = true;
    greeters.mini = {
        enable = true;
        extraConfig = ''
        [greeter]
        show-password-label = false
        [greeter-theme]
        <<lightdm-greeter-colors>>
        border-width = 6px
        <<lightdm-wallpaper>>
        '';
    };
    };
};
#+end_src

laptop config
#+name: xserver-lightdm-laptop
#+begin_src nix :noweb no-export
displayManager = {
    lightdm = {
    enable = true;
    greeters.mini = {
        enable = true;
        extraConfig = ''
        [greeter]
        show-password-label = false
        [greeter-theme]
        <<lightdm-greeter-colors>>
        border-width = 6px
        <<lightdm-fhd-wallpaper>>
        '';
    };
    };
};
#+end_src
** Locale
Module to config locale related stuff
+ [[IME]]
#+begin_src nix :tangle modules/common/globallocale.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, config, ... }:

{
  i18n.defaultLocale = "en_US.UTF-8";
  <<japanase-ime>>
}
#+end_src
** XDG
Configure XDG(X Desktop Group) stuff.
This module is imported from home-manager
#+begin_src nix :tangle modules/common/xdg.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:

{
  <<xdg-enable>>
  <<xdg-userdirs>>
  <<xdg-mime-enable>>
  <<xdg-mimeapps>>
  configFile = import ./xdg-configfiles.nix { inherit pkgs; };
}
#+end_src

*** Enable XDG module
#+name: xdg-enable
#+begin_src nix
enable = true;
#+end_src
*** Enable XDG user dirs
XDG user dirs is a tool to manager "well known" user directories like the Desktop folder, Pictures folder, and the Music folder.
These directories are created by enabling this.
#+name: xdg-userdirs
#+begin_src nix
userDirs.enable = true;
#+end_src
*** Enable XDG mime
Install files to support the XDG Shared MIME-info specification and the XDG MIME Applications specification.
#+name: xdg-mime-enable
#+begin_src nix
mime.enable = true;
#+end_src
*** XDG mimeapps
Configure default applications/associations of applications with mimetypes
#+name: xdg-mimeapps
#+begin_src nix
mimeApps = {
enable = true;
defaultApplications = {
    "text/html" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/http" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/https" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/about" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/unknown" = "org.qutebrowser.qutebrowser.desktop";
};
};
#+end_src
* Services
** OpenSSH
This module configures OpenSSH, a suite of secure networking utilities based on the Secure Shell (SSH) protocol, which provides a secure channel over an unsecured network in a client–server architecture.
#+begin_src nix :tangle modules/services/openssh.nix :noweb no-export
# This file is generated from "README.org"
{
  services.openssh = {
    <<ssh-enable>>
    <<ssh-challenge-response-authentication>>
    <<ssh-x11-forward>>
    <<ssh-open-firewall>>
    <<ssh-password-authentication>>
    <<ssh-root-login>>
  };
}
#+end_src
*** Enable SSH
#+name: ssh-enable
#+begin_src nix
enable = true;
#+end_src
*** Challenge Response Authentication
challenge response authentication uses a cryptographic protocol that allows to prove that the user knows the password without revealing the password itself.
thus, makes the authentication more secure.
#+name: ssh-challenge-response-authentication
#+begin_src nix
challengeResponseAuthentication = true;
#+end_src
*** X11 forwarding
X11 forwarding is a method to start a graphical apllication installed on a remote system and forward that application to the local system.
#+name: ssh-x11-forward
#+begin_src nix
forwardX11 = false;
#+end_src
*** Open firewall
Whether to automatically open the ssh ports in the firewall.
#+name: ssh-open-firewall
#+begin_src nix
openFirewall = true;
#+end_src
*** Password authentication
Disable this to use Public Key Authentication
#+name: ssh-password-authentication
#+begin_src nix
passwordAuthentication = false;
#+end_src
*** Root login
Whether the root user can login using ssh.
#+name: ssh-root-login
#+begin_src nix
permitRootLogin = "no";
#+end_src
** Dunst
Dunst is a minimal notification daemon. Mostly used by WM users.
This module is imported from home-manager
+ [[Notification Colors][Colors]]
#+begin_src nix :tangle modules/services/dunst.nix :noweb no-export
# This file is generated from "README.org"
{
  services.dunst = {
    <<dunst-enable>>
    <<dunst-settings>>
  };
}
#+end_src
*** Enable dunst
#+name: dunst-enable
#+begin_src nix
enable = true;
#+end_src
*** Dunst Settings
Font can be configured [[#dunstnotifications-font][here]]
Colors can be configured [[#notification-colors][here]]
#+name: dunst-settings
#+begin_src nix :noweb no-export
settings = {
    global.transparency = 10;
    global.alignment = "left";
    global.geometry = "300x5-30+20";
    <<dunst-font>>
    <<dunst-colors>>
    urgency_low.timeout = 10;
    urgency_normal.timeout = 10;
    urgency_critical.timeout = 10;
};
#+end_src
** Picom
Picom is a X11 compositor.
It can be used to configure opacity of programs, blur,etc.
This module is imported from home-manager
#+begin_src nix :tangle modules/services/picom.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  services.picom = {
    <<picom-enable>>
    <<picom-package>>
    <<picom-backend>>
    <<picom-experimental-backends>>
    <<picom-opacity>>
    extraOptions = ''
      <<picom-client-opacity>>
      <<picom-detect-rounded-corners>>
      <<picom-blur>>
      <<picom-blur-exclude>>
      <<picom-corner-radius>>
      <<picom-rounded-corners-exclude>>
      <<picom-enable-rounded-borders>>
      <<picom-round-borders-exclude>>
    '';
  };
}
#+end_src

*** Enable picom
#+name: picom-enable
#+begin_src nix
enable = true;
#+end_src
*** Picom package
This fork contains dual kawase blur(KDE-like fancy blur) and rounded borders.
Requires NUR.
#+name: picom-package
#+begin_src nix
package = pkgs.nur.repos.reedrw.picom-next-ibhagwan;
#+end_src
*** Picom backend
xrender backend uses software rendering.
glx uses GPU rendering.
It's obviously that glx is better.
round-borders was originally written for xrender backend, but it's ported to glx
kawase-blur was originally written for glx backend.
Just use glx.
#+name: picom-backend
#+begin_src nix
backend = "glx";
#+end_src
*** Experimental backends
Whether to use the new experimental backends.
Currently, new backends feature better vsync with the xrender backend and improved input lag with the glx backend(for non-NVIDIA users).
Also, I think dual_kawase blur and rounded borders have better implementation within the experimental backends code.
#+name: picom-experimental-backends
#+begin_src nix
experimentalBackends = true;
#+end_src

*** Detect Client Opacity
Detect _NET_WM_OPACITY on client windows.
This prevents opacity being ignored for some apps.
#+name: picom-client-opacity
#+begin_src nix
detect-client-opacity = true;
#+end_src
*** Detect rounded corners
Detect rounded corners and treat them as rectangular
#+name: picom-detect-rounded-corners
#+begin_src nix
detect-rounded-corners = true;
#+end_src
* Machines
** Default system configs
This belongs to each machine configurations.
#+name: machine-configuration-defaults
#+begin_src nix :noweb no-export
# This file is generated from "README.org"
<<machine-configuration-defaultimports>>
#+end_src

*** imports
import files that differs to machine and is stored inside machine directory.
Files that are shared between machines are better to import from [[#defaults][flakes]]
#+name: machine-configuration-defaultimports
#+begin_src nix
imports =
[
    # Include the results of the hardware scan.
    ./hardware-configuration.nix
    # import usersettings
    ./usersettings.nix
];
#+end_src
** Desktop
*** System
** Laptop
*** System
** Server
*** System
* Symlinks
Nix modules to symlink various files included config files
** /etc files
This module symlinks files that belongs in /etc.
I like to use this path to store icons and wallpapers because this directory */etc* is not machine dependent like user's home folder.
That makes possible to share same config that uses these files for more than one machines.
#+begin_src nix :tangle modules/common/etcfiles.nix :noweb no-export
# This file is generated from "README.org"
{
  environment.etc = {
    <<etc-wallpaper-files>>
    # icons
    "icons/cpu.xpm".source = ../../icons/cpu.xpm;
    "icons/ram.xpm".source = ../../icons/ram.xpm;
    "icons/battery.xpm".source = ../../icons/battery.xpm;
    "icons/battery-charging.xpm".source = ../../icons/battery-charging.xpm;
    "icons/calendar.xpm".source = ../../icons/calendar.xpm;
    "icons/volume.xpm".source = ../../icons/volume.xpm;
    "icons/volume-mute.xpm".source = ../../icons/volume-mute.xpm;
    "icons/clock.xpm".source = ../../icons/clock.xpm;
    # misc
    ".jislayoutremap.xkb".source = ../../configs/jislayoutremap.xkb;
    "x230key.xkb".source = ../../configs/thinkpadlayout.xkb;
    # emojis
    "UnicodeData.txt".source = ../../textfiles/UnicodeData.txt;
  };
}
#+end_src

** ~/.config files
Specify files to symlink into $HOME/.config here.
Usable for programs that Nix options doesn't exist.
This module is imported from home-manager
#+begin_src nix :tangle modules/common/xdg-configfiles.nix
# This file is generated from "README.org"
{ pkgs, ... }:

{
  "nvim/coc-settings.json".source = ../../configs/coc-settings.json;
  "neofetch/config.conf".source = ../../configs/neofetch.conf;
  "ncpamixer.conf".source = ../../configs/ncpamixer.conf;

  "fontconfig/conf.d/10-prefer-emoji.conf".source = ../../configs/fontconfig/10-prefer-emoji.conf;
  "fontconfig/conf.d/10-symbols.conf".source = ../../configs/fontconfig/10-symbols.conf;
  "fontconfig/conf.d/65-nonlatin.conf".source = ../../configs/fontconfig/65-nonlatin.conf;

  <<tridactylrc-symlink>>

  # keynav{{{
  "keynav/keynavrc".text = ''
    super+semicolon start
    s warp
    m click 6
    w click 5
    v click 4
    z click 7
  '';
  # }}}

  # flashfocus
  "flashfocus/flashfocus.yml".source = ../../configs/flashfocus.yml;

  # nixpkgs{{{
  "nixpkgs/config.nix".text = ''
    { allowUnfree = true; }
  '';
  # }}}

  "vifm/vifmrc".source = ../../configs/vifmrc.vim;

  "PulseEffects/output/Perfect EQ.json".source = pkgs.fetchurl {
    url = "https://raw.githubusercontent.com/JackHack96/PulseEffects-Presets/master/Perfect%20EQ.json";
    name = "perfecteq.json";
    sha256 = "04mjqsiajqdzp43fn16j6sfz3972yfpqq6s2vw0cnim5bp9a642b";
  };
}
#+end_src
* Credits

- [[https://github.com/NixOS/nixos-artwork/tree/master/logo][NixOS/nixos-artwork]] -> NixOS logo. Changed colors and used in lock screen wallpaper. used under [[https://creativecommons.org/licenses/by/4.0][CC-BY license]]
- [[https://wallhaven.cc/w/45xkj1][Wallpaper]]
- Icons from [[https://remixicon.com][Remix Icon]]
