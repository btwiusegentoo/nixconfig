#+TITLE: My NixOS configuration
#+LANGUAGE: en
#+STARTUP: inlineimages overview
#+PROPERTY: header-args :tangle yes :noweb yes :cache yes :results silent

[[https://builtwithnix.org/badge.svg]] [[https://github.com/btwiusegentoo/nixconfig/workflows/Haskell%20Linter/badge.svg]]

#+ATTR_HTML: :width 600
#+ATTR_ORG: :width 600
[[file:pictures/screenshot1.png]] [[file:pictures/screenshot2.png]] [[file:pictures/wallpaper2.png]]


* Introduction :noexport:
Hi! This is my repo that contains my configuration files for my machines (aka dotfiles)
This repository contains configuration for three hosts currently
- Ryzen desktop
- My portable laptop
- My lowspec server
All hosts runs NixOS and it's managed by [[https://nixos.wiki/wiki/Flakes][Nix Flakes]].
[[https://github.com/nix-community/home-manager][home-manager]] is used to manage user environment. I try to install programs/services in user level as much as possible.
I use [[https://xmonad.org/][xmonad]] as window manager for Desktop and Laptop, while server is headless.
My English is not good, but I will try to make this into literate config just for fun.
To generate actual files, open this file in emacs, and execute ~M-x org-babel-tangle~.
You can install this config running this command at repository root ~nixos-rebuild switch --flake .~
Note that you need [[#nix][flakes enabled to install]].
Use ~SPC m .~ in doom-emacs to move faster to headlines.

* Table of Contents :TOC_2_gh:
- [[#flake][Flake]]
  - [[#flake-inputs][Flake inputs]]
  - [[#defaults][defaults]]
  - [[#nixpkgs-config][nixpkgs config]]
  - [[#import-overlays][import overlays]]
  - [[#machines][Machines]]
- [[#input][Input]]
  - [[#keyboard][Keyboard]]
- [[#look-and-feel][Look And Feel]]
  - [[#color-scheme][Color Scheme]]
  - [[#fonts][Fonts]]
  - [[#wallpaper][Wallpaper]]
  - [[#icons][Icons]]
  - [[#cursors][Cursors]]
  - [[#opacity][Opacity]]
  - [[#border][Border]]
- [[#terminal][Terminal]]
  - [[#alacritty][Alacritty]]
- [[#common-configs][Common configs]]
  - [[#nix][Nix]]
  - [[#doas][doas]]
  - [[#console][Console]]
  - [[#bluetooth][Bluetooth]]
  - [[#x-server][X server]]
  - [[#lightdm][LightDM]]
  - [[#etc-files][/etc files]]
  - [[#locale][Locale]]
  - [[#xdg][XDG]]
  - [[#config-files][~/.config files]]
- [[#services][Services]]
  - [[#pulseaudio][PulseAudio]]
  - [[#openssh][OpenSSH]]
  - [[#zram][ZRAM]]
  - [[#dunst][Dunst]]
  - [[#picom][Picom]]
- [[#machines-1][Machines]]
  - [[#default-system-configs][Default system configs]]
  - [[#desktop][Desktop]]
  - [[#laptop][Laptop]]
  - [[#server][Server]]
- [[#credits][Credits]]

* [0/4] Tasks :noexport:
** TODO Finish documentation of system modules
** TODO Finish documentation of user modules
** TODO Document emacs
** TODO Document xmonad
* Flake
A [[https://nixos.wiki/wiki/Flakes][flake]] is (usually) a Git repository that contains a file named ~flake.nix~ at root.
This repository is compatible with nix flakes.
The following code is the base code of  ~flake.nix~ file.
#+begin_src nix :tangle flake.nix :noweb no-export
# This file is generated from "README.org"
{
  description = "NixOS configuration for all machines";

  <<flake-inputs>>

  outputs = inputs@{ self, home-manager, nur, nixpkgs, ... }:
    let
      inherit (builtins) listToAttrs attrValues attrNames readDir;
      inherit (nixpkgs) lib;
      inherit (lib) removeSuffix;

      <<nixpkgs-config>>

      <<flake-defaults>>
    in
    {
      <<flake-overlays>>

      nixosConfigurations = {
        <<desktop1>>
        <<laptop1>>
        <<server1>>
      };
    };
}
#+end_src
** Flake inputs
Flakes provides a better approach than channel to manage nixpkgs and overlays. 
It's called ~inputs~.
Channels aren't pinned in the config. When updating nixpkgs, you have to run this command ~nix-channel --update~ *locally* everytime.
Therefore, nixpkgs revision differs from machine to machine, making not fully reproducible.
Using nix flakes, All inputs are automatically pinned at specific revision in ~flake.lock~ file at repository root to guarantee reproducibility.
This can also be achieved by manually pinning nixpkgs at specific revision using overlays.
But flakes does it automatically, without having to update rev and sha256 manually everytime.
You can update inputs easily like this: ~nix flake --update-input nixpkgs~

Currently, I have *home-manager*, *NUR* (nix user repository), *emacs pgtk nativecomp overlay*, and *nixpkgs* 20.09,unstable,master as inputs:
#+name: flake-inputs
#+begin_src nix
  inputs = {
    home-manager = {
      url = "github:rycee/home-manager";
      inputs = {
        nixpkgs.follows = "nixpkgs";
      };
    };
    nur.url = "github:nix-community/NUR";
    emacs.url = "github:berbiche/emacs-pgtk-nativecomp-overlay";

    nixpkgs.url = "github:nixos/nixpkgs/nixos-20.09";
    unstable.url = "github:nixos/nixpkgs/nixos-unstable";
    master.url = "github:nixos/nixpkgs/master";
  };
#+end_src

** defaults
Import default modules(that every machine uses)
#+name: flake-defaults
#+begin_src nix
      defaults = { pkgs, ... }: {
        imports = [
          ./cachix.nix
          ./modules/common/nix.nix
          ./modules/common/doas.nix
          ./modules/common/console.nix
          ./modules/common/bluetooth.nix
          ./modules/common/etcfiles.nix
          ./modules/common/systempackages.nix
          ./modules/common/globallocale.nix
          ./modules/services/pulseaudio.nix
          ./modules/services/openssh.nix
          ./modules/services/zram.nix
        ];
      };
#+end_src

** nixpkgs config
This configuration is for default nixpkgs.
Set system arch to x86_64, Allow installation for non-free software(also known as proprietary software), and import overlays from [[#overlays][here]]
#+name: nixpkgs-config
#+begin_src nix
      pkgs = (import nixpkgs) {
        system = "x86_64-linux";
        config = { allowUnfree = true; };
        overlays = attrValues self.overlays;
      };
#+end_src

** import overlays
This code searchs ~./overlays~ directory for nix files and automatically imports the files.
NUR, nixos-unstable, nixpkgs master are imported as package set of pkgs here. Packages from these package sets can be referred like ~pkgs.unstable.fish~ ~pkgs.master.discord~ ~pkgs.nur.repos.rycee.firefox-addons~
This have a benefit than just importing the same way as pkgs like ~{pkgs, unstable, master, ... }:~. If you import unstable just like pkgs, idk why, but it can't be imported from overlays.
So it can't be used to override packages of home-manager modules.
Importing as package set makes it possible and it's more convenient.
#+name: flake-overlays
#+begin_src nix
      overlays =
        let
          overlayFiles = listToAttrs (map
            (name: {
              name = removeSuffix ".nix" name;
              value = import (./overlays + "/${name}");
            })
            (attrNames (readDir ./overlays)));
        in
        overlayFiles // {
          nur = final: prev: {
            nur = import inputs.nur { nurpkgs = final; pkgs = final; };
          };
          emacsPgtk = final: prev: {
            emacsGccPgtk = inputs.emacs.packages.${final.system}.emacsGccPgtk;
          };
          unstable = final: prev: {
            unstable = import inputs.unstable {
              system = final.system;
              config.allowUnfree = true;
            };
          };
          master = final: prev: {
            master = import inputs.master {
              system = final.system;
              config.allowUnfree = true;
            };
          };
        };
#+end_src
** Machines
These are the codes that evaluates a NixOS configuration for tools like ~nixos-rebuild~ for each machines.
It imports modules (that contains configuration for) for each machines.
*** Desktop
#+name: desktop1
#+begin_src nix
        desktop1 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              defaults
              ./machines/maindesktop/configuration.nix
              ./modules/common/xserver.nix
              ./modules/common/fonts.nix
              home-manager.nixosModules.home-manager
              ({
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users.btw = { ... }: {
                  imports = [
                    ./machines/maindesktop/home.nix
                    ./modules/services/dunst.nix
                    ./modules/services/picom.nix
                    ./modules/terminal/alacritty.nix
                  ];
                };
              })
            ];
          inherit pkgs;
        };
#+end_src

*** Laptop
#+name: laptop1
#+begin_src nix
        laptop1 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              defaults
              ./machines/mainlaptop/configuration.nix
              ./modules/common/xserverlaptop.nix
              ./modules/common/fonts.nix
              home-manager.nixosModules.home-manager
              ({
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users.x230 = { ... }: {
                  imports = [
                    ./machines/mainlaptop/home.nix
                    ./modules/services/dunst.nix
                    ./modules/services/picom.nix
                    ./modules/terminal/alacritty.nix
                  ];
                };
              })
            ];
          inherit pkgs;
        };
#+end_src

*** Server
#+name: server1
#+begin_src nix
        server1 = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              defaults
              ./machines/mainserver/configuration.nix
              home-manager.nixosModules.home-manager
              ({
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users.hac = { ... }: {
                  imports = [
                    ./machines/mainserver/home.nix
                  ];
                };
              })
            ];
          inherit pkgs;
        };
#+end_src
* Input
** Keyboard
*** Xorg repeat rate
Default repeat rate is too slow. Change it
#+name: xserver-autorepeat
#+begin_src nix
    autoRepeatDelay = 200;
    autoRepeatInterval = 25;
#+end_src
*** Dvorak
I use Dvorak layout on HHKB.
[[https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/KB_United_States_Dvorak.svg/800px-KB_United_States_Dvorak.svg.png]]
Dvorak layout is a ergonomic alternative for qwerty layout that requires less movement.
My keybinds are configured with HHKB Dvorak usage in mind. I didn't remapped vim(or evil-mode) keys(hjkl) because it already feels natural as is.

Console config
#+name: consolekeymap
#+begin_src nix
keyMap = "dvorak";
#+end_src

Xorg config
#+name: xserver-keymap
#+begin_src nix
layout = "us";
xkbVariant = "dvorak";
#+end_src
* Look And Feel
** Color Scheme
I use material-palenight as colorscheme for everything from editor to browser.
#+ATTR_HTML: :width 600
#+ATTR_ORG: :width 600
[[file:pictures/material-palenight-palette.png]]
Color palette picture taken from [[https://www.material-theme.com/docs/reference/color-palette/][here]]
*** Console Colors
The 16 colors palette used by TTY.
Leave empty to use the default colors.
Colors must be in hexademical format and listed in order from color 0 to color 15.
#+name: consolecolors
#+begin_src nix
colors = [ "434759" "f07178" "c3e88d" "ffcb6b" "82aaff" "c792ea" "89ddff" "d0d0d0" "434758" "ff8b92" "ddffa7" "ffe585" "9cc4ff" "e1acff" "a3f7ff" "fefefe" ];
#+end_src

*** LightDM Colors
Configure center dialog colors
#+name: lightdm-greeter-colors
#+begin_src nix
text-color = "#A6ACCD"
error-color = "#F07178"
window-color = "#202331"
border-color = "#202331"
password-color = "#A6ACCD"
password-background-color = "#202331"
password-border-color = "#202331"
#+end_src
*** Notification Colors
#+name: dunst-colors
#+begin_src nix
global = {
    frame_color = "#959DCB";
    separator_color = "#959DCB";
};
urgency_low = {
    background = "#444267";
    foreground = "#676E95";
};
urgency_normal = {
    background = "#32374D";
    foreground = "#959DCB";
};
urgency_critical = {
    background = "#F07178";
    foreground = "#959DCB";
};
#+end_src
*** Alacritty Colors
Enable custom cursor colors
#+name: alacritty-custom-cursor-colors
#+begin_src nix
custom_cursor_colors = true;
#+end_src
Color codes taken from [[https://github.com/aaron-williamson/base16-alacritty/blob/master/colors/base16-material-palenight-256.yml][here]]
#+name: alacritty-colors
#+begin_src nix
colors = {
  # Default colors
  primary = {
    background = "0x292d3e";
    foreground = "0x959dcb";
  };
  cursor = {
    text = "0x202331";
    cursor = "0xc792ea";
  };
  # Normal colors
  normal = {
    black = "0x292d3e";
    red = "0xf07178";
    green = "0xc3e88d";
    yellow = "0xffcb6b";
    blue = "0x82aaff";
    magenta = "0xc792ea";
    cyan = "0x89ddff";
    white = "0x959dcb";
  };
  # Bright colors
  bright = {
    black = "0x676e95";
    red = "0xf07178";
    green = "0xc3e88d";
    yellow = "0xffcb6b";
    blue = "0x82aaff";
    magenta = "0xc792ea";
    cyan = "0x89ddff";
    white = "0xffffff";
  };
  indexed_colors = [
    {
      index = 16;
      color = "0xf78c6c";
    }
    {
      index = 17;
      color = "0xff5370";
    }
    {
      index = 18;
      color = "0x444267";
    }
    {
      index = 19;
      color = "0x32374d";
    }
    {
      index = 20;
      color = "0x8796b0";
    }
    {
      index = 21;
      color = "0x959dcb";
    }
  ];
};
#+end_src
** Fonts
I use
Apple Color Emoji for emojis (can be tested [[https://getemoji.com/][here]])
[[file:pictures/screenshot-emojis.png]]
Gohu Font Nerd Font for nerdfont
[[file:pictures/screenshot-nerdfont.png]]
Spleen as monospaced fixed-pitch font for editor, terminal, etc
San Francisco as variable pitch font
All The Icons is a nerdfont equivalent for emacs.
Noto Fonts CJK is used as Japanese font.

Install fonts:
#+begin_src nix :tangle modules/common/fonts.nix
# This file is generated from "README.org"
{ pkgs, ... }:
{
  fonts = {
    <<system-font-config>>
    <<enable-font-dir>>
    <<enable-ghostscript-fonts>>
    fonts = with pkgs; [
      (nerdfonts.override { fonts = [ "Gohu" ]; })
      unstable.dejavu_fonts
      unstable.spleen
      san-francisco-font
      apple-color-emoji
      noto-fonts-cjk
      emacs-all-the-icons-fonts
    ];
  };
}
#+end_src
*** System font config
Set system-wide monospace/emoji font below. Note that setting emoji here is not sufficient to show emoji properly.
#+name: system-font-config
#+begin_src nix :noweb no-export
    fontconfig = {
      <<fontconfig-enable>>
      <<fontconfig-allowbitmaps>>
      <<use-embedded-bitmaps>>
      defaultFonts = {
        emoji = [ "Apple Color Emoji" ];
        monospace = [ "Spleen" ];
      };
    };
#+end_src
**** Enable fontconfig
If enabled, a fontconfig file will be built pointing to a set of default fonts.
#+name: fontconfig-enable
#+begin_src nix
enable = true;
#+end_src
**** Allow bitmaps
This option is needed to allow usage of bitmap fonts. Like Spleen I use.
#+name: fontconfig-allowbitmaps
#+begin_src nix
allowBitmaps = true;
#+end_src
**** Use embedded bitmaps
This option is necessary to make emacs show unicode emojis properly.
#+name: use-embedded-bitmaps
#+begin_src nix
useEmbeddedBitmaps = true;
#+end_src
**** Enable Font Dir
Create a directory with links to all fonts in ~/run/current-system/sw/share/X11-fonts~
#+name: enable-font-dir
#+begin_src nix
enableFontDir = true;
#+end_src
**** Enable ghost script fonts
Add the fonts provided by Ghostscript to the list of system fonts.
#+name: enable-ghostscript-fonts
#+begin_src nix
enableGhostscriptFonts = true;
#+end_src
*** TTY Font
Console fonts needs to be installed here via ~console.packages~ to be able to set.
#+name: consolefont
#+begin_src nix
packages = with pkgs; [ unstable.spleen ];
font = "spleen-6x12";
#+end_src
*** Alacritty Fonts
#+name: alacritty-font
#+begin_src nix
font = {
  normal = {
    family = "Spleen";
    style = "Regular";
  };
  bold = {
    family = "Spleen";
    style = "Bold";
  };
  italic = {
    family = "Spleen";
    style = "Regular";
  };
  size = 12;
  offset = {
    x = 0;
    y = 0;
  };
  glyph_offset = {
    x = 0;
    y = 0;
  };
};
#+end_src
*** fontconfig
Font configs that can't be configured using nix options belongs here.
**** 10-symbols.conf
This allows to use nerdfont symbols while using Spleen as font. It's really useful on terminal.
#+begin_src xml :tangle configs/fontconfig/10-symbols.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <alias>
        <family>Spleen</family>
        <prefer>
            <family>GohuFont Nerd Font</family>
        </prefer>
    </alias>
</fontconfig>
#+end_src
**** 65-nonlatin.conf
This configures Japanese font.
This makes programs use *Noto Sans CJK JP* for Japanese automatically. Therefore no need to configure Japanese font as main font.
#+begin_src xml :tangle configs/fontconfig/65-nonlatin.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <!-- Default font for the ja_JP locale (no fc-match pattern) -->
    <match>
        <test compare="contains" name="lang">
            <string>ja</string>
        </test>
        <edit mode="prepend" name="family">
            <string>Noto Sans CJK JP</string>
        </edit>
    </match>
    <alias>
        <family>serif</family>
        <prefer>
            <family>Noto Sans CJK JP</family>
        </prefer>
    </alias>
    <alias>
        <family>sans-serif</family>
        <prefer>
            <family>Noto Sans CJK JP</family>
        </prefer>
    </alias>
    <alias>
        <family>monospace</family>
        <prefer>
            <family>Noto Sans CJK JP</family>
        </prefer>
    </alias>
</fontconfig>
#+end_src

**** 10-prefer-emoji.conf
Seems like this user-level config is needed to programs use Apple Color Emoji for every emojis.
#+begin_src xml :tangle configs/fontconfig/10-prefer-emoji.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <match>
        <edit name="family" mode="prepend">
            <string>Apple Color Emoji</string>
        </edit>
    </match>
</fontconfig>
#+end_src
*** Dunst(Notifications) font
#+name: dunst-font
#+begin_src nix
global.font = "SFNS Display 14";
#+end_src
** Wallpaper
Desktop wallpaper ~pictures/wallpaper1.png~
#+ATTR_HTML: :width 300
#+ATTR_ORG: :width 300
[[file:pictures/wallpaper1.png]]
Lock screen wallpaper ~pictures/wallpaper2.png~
[[file:pictures/wallpaper2.png]]
*** Wallpaper files
Put (symlink) files into /etc. It makes easy to set wallpapers from any machines.
#+name: etc-wallpaper-files
#+begin_src nix
"wallpapers/wallpaper1.png".source = ../../pictures/wallpaper1.png;
"wallpapers/wallpaper2.png".source = ../../pictures/wallpaper2.png;
"wallpapers/wallpaper2-1080.png".source = ../../pictures/wallpaper2-1080.png;
#+end_src
*** Lock screen
Set 1440p lock screen wallpaper
#+name: lightdm-wallpaper
#+begin_src nix
background-image = "/etc/wallpapers/wallpaper2.png"
#+end_src

Set a 1080p equivalent
#+name: lightdm-fhd-wallpaper
#+begin_src nix
background-image = "/etc/wallpapers/wallpaper2-1080.png"
#+end_src
** Icons
** Cursors
*** Alacritty cursor
#+name: alacritty-cursor
#+begin_src nix
cursor = {
style = "Beam";
};
#+end_src
** Opacity
#+ATTR_HTML: :width 300
#+ATTR_ORG: :width 300
[[file:pictures/screenshot-opacity.png]]
Programs that doesn't have opacity option, or the opacity option doesn't work great(like PGTK emacs) can be set opacity using picom with following code:
#+name: picom-opacity
#+begin_src nix
opacityRule = [
    "80:class_g  = 'Zathura'"
    "80:class_g  = 'TelegramDesktop'"
    "80:class_g  = 'Discord'"
    "80:class_g  = 'Emacs'"
    "100:class_g = 'keynav'"
];
#+end_src
*** Blur
Configure blur method and strength for translucent programs.
I use dual kawase blur.
#+name: picom-blur
#+begin_src nix
blur:
{
    method = "kawase";
    strength = 8;
    background = false;
    background-frame = false;
    background-fixed = false;
};
#+end_src
*** Blur exclude
Set programs to exclude from background blur here.
Exclude keynav because it's not intended to be recognized as window and it becomes buggy.
#+name: picom-blur-exclude
#+begin_src nix
blur-background-exclude = [
    "class_g = 'keynav'"
];
#+end_src
*** Alacritty opacity
Set Alacritty opacity.
Window opacity as a floating point number from ~0.0~ to ~1.0~
The value ~0.0~ is completely transparent and ~1.0~ is opaque.
#+name: alacritty-opacity
#+begin_src nix
background_opacity = 0.8;
#+end_src
** Border
[[file:pictures/screenshot-border.png]]
*** Enable rounded borders
Enable rounded borders in picom
#+name: picom-enable-rounded-borders
#+begin_src nix
round-borders = 1;
#+end_src
*** Corner radius
Set window corner radius
#+name: picom-corner-radius
#+begin_src nix
corner-radius = 5;
#+end_src
*** Rounded corner exclude
Programs to exclude from rounded corners.
Exclude keynav and dock, full screen programs.
#+name: picom-rounded-corners-exclude
#+begin_src nix
rounded-corners-exclude = [
    "window_type = 'dock'",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_FULLSCREEN'",
    "class_g = 'keynav'",
];
#+end_src
*** Rounded borders exclude
Exclude programs from rounded borders.
Exclude keynav because it's not intended to be recognized as window and it becomes buggy.
#+name: picom-round-borders-exclude
#+begin_src nix
round-borders-exclude = [
    "class_g = 'keynav'"
];
#+end_src
* Terminal
** Alacritty
Alacritty is a GPU-accelerated terminal emulator, written in Rust.
I use as default terminal.
#+ATTR_ORG :width 200
#+ATTR_HTML :width 200
[[https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/alacritty-term%2Bscanlines.svg]]
+ [[Alacritty Colors][Colors]]
+ [[Alacritty Fonts][Fonts]]
#+begin_src nix :tangle modules/terminal/alacritty.nix :noweb no-export
{
  programs.alacritty = {
    <<alacritty-enable>>
    settings = {
      <<alacritty-enable-true-color>>
      <<alacritty-window-padding>>
      <<alacritty-window-dynamicpadding>>
      <<alacritty-window-decorations>>
      <<alacritty-window-startup-mode>>
      <<alacritty-scrolling>>
      <<alacritty-font>>
      <<alacritty-boldtext-bright-colors>>
      <<alacritty-opacity>>
      <<alacritty-keybinds>>
      <<alacritty-custom-cursor-colors>>
      <<alacritty-cursor>>
      <<alacritty-colors>>
    };
  };
}
#+end_src
*** Install Alacritty
Whether to enable Alacritty
#+name: alacritty-enable
#+begin_src nix
enable = true;
#+end_src
*** Enable true color
xterm-256color describes Xterm with support for 256 colors enabled.
set TERM environment variable.
#+name: alacritty-enable-true-color
#+begin_src nix
env.TERM = "xterm-256color";
#+end_src
*** Alacritty padding
Blank space added around the window in pixels.
#+name: alacritty-window-padding
#+begin_src nix
window.padding = {
    x = 12;
    y = 0;
};
#+end_src
Dynamic padding
#+name: alacritty-window-dynamicpadding
#+begin_src nix
window.dynamic_padding = false;
#+end_src
*** Window decorations
- full : Borders and title bar
- none: Neither borders nor title bar
#+name: alacritty-window-decorations
#+begin_src nix
window.decorations = "none";
#+end_src
*** Window startup mode
- Windowed
- Maximized
- Fullscreen
#+name: alacritty-window-startup-mode
#+begin_src nix
window.startup_mode = "Windowed";
#+end_src
*** Scrolling
History sets maximum number of lines in the scrollback buffer.
Multiplier sets scrolling distance multiplier.
#+name: alacritty-scrolling
#+begin_src nix
scrolling = {
    history = 10000;
    multiplier = 3;
};
#+end_src
*** Draw bold text with bright colors
If ~true~, bold text is drawn using the bright color variants.
Maybe usable for bitmap fonts?
#+name: alacritty-boldtext-bright-colors
#+begin_src nix
draw_bold_text_with_bright_colors = true;
#+end_src
*** Key bindings
~C-S-c~ to copy, ~C-S-v~ to paste
~C-S-Up~ to scroll upwards.
~C-S-Down~ to scroll downwards.
#+name: alacritty-keybinds
#+begin_src nix
      key_bindings = [
        {
          key = "V";
          mods = "Control|Shift";
          action = "Paste";
        }
        {
          key = "C";
          mods = "Control|Shift";
          action = "Copy";
        }
        {
          key = "Up";
          mods = "Control|Shift";
          action = "ScrollPageUp";
        }
        {
          key = "Down";
          mods = "Control|Shift";
          action = "ScrollPageDown";
        }
      ];
#+end_src
* Common configs
** Nix
Enable nix flakes(flakes is still a experimental feature.)
Add ~@wheel~ to Nix allowed/trusted users. So you can use nix, run ~nixos-rebuild~, use cachix without root.

#+begin_src nix :tangle modules/common/nix.nix
# This file is generated from "README.org"
{ pkgs, ... }:
{
  nix.package = pkgs.nixFlakes;

  nix.extraOptions = ''
    experimental-features = nix-command flakes
    builders-use-substitutes = true
  '';
  nix.allowedUsers = [ "@wheel" ];
  nix.trustedUsers = [ "root" "@wheel" ];
}
#+end_src

** doas
The *doas* utility is a program originally written for OpenBSD, that can be used as alternative for *sudo*
The following code disables *sudo*, enables *doas*, permits ~@wheel~ group users to use doas with password.
~keepEnv~ makes retain the environment variables when creating the environment for the new process.
~persist~ means it literally. After running doas successfully, do not ask password again for some time.
#+begin_src nix :tangle modules/common/doas.nix
# This file is generated from "README.org"
{
  security.sudo.enable = false;
  security.doas = {
    enable = true;
    wheelNeedsPassword = true;
    extraRules = [
      { groups = [ "wheel" ]; noPass = false; keepEnv = true; persist = true; }
    ];
  };
}
#+end_src

** Console
This module configures console(tty).
+ [[Console Colors][Colors]]
+ [[TTY Font][Font]]
+ [[Dvorak][Layout]]

#+begin_src  nix :tangle modules/common/console.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  console = {
    <<consolecolors>>
    <<consoleearlysetup>>
    <<consolefont>>
    <<consolekeymap>>
  };
}
#+end_src

*** Early Setup
Load console configurations early at initrd
#+name: consoleearlysetup
#+begin_src nix
earlySetup = true;
#+end_src
** Bluetooth
This module configures bluetooth for all machines.
#+begin_src nix :tangle modules/common/bluetooth.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  hardware.bluetooth = {
    <<bluetooth-enable>>
    <<bluetooth-package>>
    <<bluetooth-config>>
  };
}
#+end_src
*** Enable Bluetooth
#+name: bluetooth-enable
#+begin_src nix
enable = true;
#+end_src
*** Bluetooth package
bluezFull enables all bluez plugins. It's needed for many devices.
#+name: bluetooth-package
#+begin_src nix
package = pkgs.bluezFull;
#+end_src
*** Bluetooth config
Setting controller mode to ~"bredr"~ (disabling Bluetooth LE) is a workaround to fix airpods.
#+name: bluetooth-config
#+begin_src nix
config = {
    General = {
        ControllerMode = "bredr";
    };
};
#+end_src
** X server
This module configures common stuff of xserver and displaymanager.
Change layout [[#dvorak][here]] and repeat rate [[#xorg-repeat-rate][here]]

Enable xserver
#+name: xserver-enable
#+begin_src nix
enable = true;
#+end_src

Auto start xserver
#+name: xserver-autorun
#+begin_src nix
autorun = true;
#+end_src

Xorg dpi
#+name: xserver-dpi
#+begin_src nix
dpi = 96;
#+end_src

Following code goes to ~xserver.nix~ file
#+begin_src  nix :tangle modules/common/xserver.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, config, ... }:
{
  services.xserver = {
    <<xserver-enable>>
    <<xserver-autorun>>
    <<xserver-keymap>>
    <<xserver-autorepeat>>
    <<xserver-dpi>>
    desktopManager.session = [
      {
        name = "home-manager";
        start = ''
          ${pkgs.runtimeShell} $HOME/.hm-xsession &
          waitPID=$!
        '';
      }
    ];
    <<xserver-lightdm>>
  };
}
#+end_src

And this is for laptop
#+begin_src  nix :tangle modules/common/xserverlaptop.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, config, ... }:
{
  services.xserver = {
    <<xserver-enable>>
    <<xserver-autorun>>
    <<xserver-keymap>>
    <<xserver-autorepeat>>
    <<xserver-dpi>>
    desktopManager.session = [
      {
        name = "home-manager";
        start = ''
          ${pkgs.runtimeShell} $HOME/.hm-xsession &
          waitPID=$!
        '';
      }
    ];
    <<xserver-lightdm-laptop>>
  };
}
#+end_src
** LightDM
The following code configures lightdm with mini greeter.
I use LightDM because mini greeter is minimal, and it's easy to use as lockscreen with ~light-locker~.
[[#lightdm-colors][Colors]]
[[#lock-screen][Wallpaper]]
#+name: xserver-lightdm
#+begin_src nix :noweb no-export
displayManager = {
    lightdm = {
    enable = true;
    greeters.mini = {
        enable = true;
        extraConfig = ''
        [greeter]
        show-password-label = false
        [greeter-theme]
        <<lightdm-greeter-colors>>
        border-width = 6px
        <<lightdm-wallpaper>>
        '';
    };
    };
};
#+end_src

laptop config
#+name: xserver-lightdm-laptop
#+begin_src nix :noweb no-export
displayManager = {
    lightdm = {
    enable = true;
    greeters.mini = {
        enable = true;
        extraConfig = ''
        [greeter]
        show-password-label = false
        [greeter-theme]
        <<lightdm-greeter-colors>>
        border-width = 6px
        <<lightdm-fhd-wallpaper>>
        '';
    };
    };
};
#+end_src
** /etc files
This module symlinks files that belongs in /etc.
I like to use this path to store icons and wallpapers because this directory */etc* is not machine dependent like user's home folder.
That makes possible to share same config that uses these files for more than one machines.
#+begin_src nix :tangle modules/common/etcfiles.nix :noweb no-export
# This file is generated from "README.org"
{
  environment.etc = {
    <<etc-wallpaper-files>>
    # icons
    "icons/cpu.xpm".source = ../../icons/cpu.xpm;
    "icons/ram.xpm".source = ../../icons/ram.xpm;
    "icons/battery.xpm".source = ../../icons/battery.xpm;
    "icons/battery-charging.xpm".source = ../../icons/battery-charging.xpm;
    "icons/calendar.xpm".source = ../../icons/calendar.xpm;
    "icons/volume.xpm".source = ../../icons/volume.xpm;
    "icons/volume-mute.xpm".source = ../../icons/volume-mute.xpm;
    "icons/clock.xpm".source = ../../icons/clock.xpm;
    # misc
    ".jislayoutremap.xkb".source = ../../configs/jislayoutremap.xkb;
    "x230key.xkb".source = ../../configs/thinkpadlayout.xkb;
    # emojis
    "UnicodeData.txt".source = ../../textfiles/UnicodeData.txt;
  };
}
#+end_src

** Locale
Module to config locale related stuff
mozc is a Japanese input method editor.
#+begin_src nix :tangle modules/common/globallocale.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, config, ... }:

{
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.inputMethod.enabled = "fcitx";
  i18n.inputMethod.fcitx.engines = with pkgs.fcitx-engines; [ mozc ];
}
#+end_src
** XDG
Configure XDG(X Desktop Group) stuff.
This module is imported from home-manager
#+begin_src nix :tangle modules/common/xdg.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:

{
  <<xdg-enable>>
  <<xdg-userdirs>>
  <<xdg-mime-enable>>
  <<xdg-mimeapps>>
  configFile = import ./xdg-configfiles.nix { inherit pkgs; };
}
#+end_src

*** Enable XDG module
#+name: xdg-enable
#+begin_src nix
enable = true;
#+end_src
*** Enable XDG user dirs
XDG user dirs is a tool to manager "well known" user directories like the Desktop folder, Pictures folder, and the Music folder.
These directories are created by enabling this.
#+name: xdg-userdirs
#+begin_src nix
userDirs.enable = true;
#+end_src
*** Enable XDG mime
Install files to support the XDG Shared MIME-info specification and the XDG MIME Applications specification.
#+name: xdg-mime-enable
#+begin_src nix
mime.enable = true;
#+end_src
*** XDG mimeapps
Configure default applications/associations of applications with mimetypes
#+name: xdg-mimeapps
#+begin_src nix
mimeApps = {
enable = true;
defaultApplications = {
    "text/html" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/http" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/https" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/about" = "org.qutebrowser.qutebrowser.desktop";
    "x-scheme-handler/unknown" = "org.qutebrowser.qutebrowser.desktop";
};
};
#+end_src
** ~/.config files
Specify files to symlink into $HOME/.config here.
Usable for programs that Nix options doesn't exist.
This module is imported from home-manager
#+begin_src nix :tangle modules/common/xdg-configfiles.nix
# This file is generated from "README.org"
{ pkgs, ... }:

{
  "nvim/coc-settings.json".source = ../../configs/coc-settings.json;
  "neofetch/config.conf".source = ../../configs/neofetch.conf;
  "ncpamixer.conf".source = ../../configs/ncpamixer.conf;

  "fontconfig/conf.d/10-prefer-emoji.conf".source = ../../configs/fontconfig/10-prefer-emoji.conf;
  "fontconfig/conf.d/10-symbols.conf".source = ../../configs/fontconfig/10-symbols.conf;
  "fontconfig/conf.d/65-nonlatin.conf".source = ../../configs/fontconfig/65-nonlatin.conf;


  # keynav{{{
  "keynav/keynavrc".text = ''
    super+semicolon start
    s warp
    m click 6
    w click 5
    v click 4
    z click 7
  '';
  # }}}

  # flashfocus
  "flashfocus/flashfocus.yml".source = ../../configs/flashfocus.yml;

  # nixpkgs{{{
  "nixpkgs/config.nix".text = ''
    { allowUnfree = true; }
  '';
  # }}}

  "vifm/vifmrc".source = ../../configs/vifmrc.vim;

  "PulseEffects/output/Perfect EQ.json".source = pkgs.fetchurl {
    url = "https://raw.githubusercontent.com/JackHack96/PulseEffects-Presets/master/Perfect%20EQ.json";
    name = "perfecteq.json";
    sha256 = "04mjqsiajqdzp43fn16j6sfz3972yfpqq6s2vw0cnim5bp9a642b";
  };
}
#+end_src
* Services
** PulseAudio
PulseAudio is a general purpose sound server intended to run as a middleware between your applications and your hardware devices, either using ALSA or OSS.
It's required by many programs to play sound nowadays.
#+begin_src nix :tangle modules/services/pulseaudio.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  hardware.pulseaudio = {
    <<pulseaudio-enable>>
    <<pulseaudio-package>>
    <<pulseaudio-support-32bit>>
    <<pulseaudio-extramodules>>
    <<pulseaudio-daemon-config>>
  };
}
#+end_src
*** Enable PulseAudio
Whether to enable the PulseAudio sound server.
#+name: pulseaudio-enable
#+begin_src nix
enable = true;
#+end_src
*** PulseAudio 32bit support
Include 32-bit pulseaudio libraries in the system. It's needed by certain programs(like wine 32bit, mainly used for games)
#+name: pulseaudio-support-32bit
#+begin_src nix
support32Bit = true;
#+end_src
*** PulseAudio package
Select the PulseAudio derivation to use. This can be used to enable features (such as JACK support, Bluetooth) via the pulseaudioFull package
#+name: pulseaudio-package
#+begin_src nix
package = pkgs.pulseaudioFull;
#+end_src
*** PulseAudio extra modules
Extra PulseAudio modules to use. This is intended for out-of-tree pulseaudio modules like extra bluetooth codecs.
#+name: pulseaudio-extramodules
#+begin_src nix
extraModules = [ pkgs.pulseaudio-modules-bt ];
#+end_src
*** PulseAudio daemon config
idk, this config is supposed to improve audio quality
#+name: pulseaudio-daemon-config
#+begin_src nix
daemon.config = {
    default-sample-rate = "48000";
    alternate-sample-rate = "44100";
    default-sample-channels = "2";
    default-channel-map = "front-left,front-right";
    default-fragments = "2";
    default-fragment-size-msec = "125";
    enable-lfe-remixing = "no";
    high-priority = "yes";
    nice-level = "-11";
    realtime-scheduling = "yes";
    realtime-priority = "9";
    rlimit-rtprio = "9";
    resample-method = "soxr-vhq";
    daemonize = "no";
    default-sample-format = "float32le";
};
#+end_src
** OpenSSH
This module configures OpenSSH, a suite of secure networking utilities based on the Secure Shell (SSH) protocol, which provides a secure channel over an unsecured network in a client–server architecture.
#+begin_src nix :tangle modules/services/openssh.nix :noweb no-export
# This file is generated from "README.org"
{
  services.openssh = {
    <<ssh-enable>>
    <<ssh-challenge-response-authentication>>
    <<ssh-x11-forward>>
    <<ssh-open-firewall>>
    <<ssh-password-authentication>>
    <<ssh-root-login>>
  };
}
#+end_src
*** Enable SSH
#+name: ssh-enable
#+begin_src nix
enable = true;
#+end_src
*** Challenge Response Authentication
challenge response authentication uses a cryptographic protocol that allows to prove that the user knows the password without revealing the password itself.
thus, makes the authentication more secure.
#+name: ssh-challenge-response-authentication
#+begin_src nix
challengeResponseAuthentication = true;
#+end_src
*** X11 forwarding
X11 forwarding is a method to start a graphical apllication installed on a remote system and forward that application to the local system.
#+name: ssh-x11-forward
#+begin_src nix
forwardX11 = false;
#+end_src
*** Open firewall
Whether to automatically open the ssh ports in the firewall.
#+name: ssh-open-firewall
#+begin_src nix
openFirewall = true;
#+end_src
*** Password authentication
Disable this to use Public Key Authentication
#+name: ssh-password-authentication
#+begin_src nix
passwordAuthentication = false;
#+end_src
*** Root login
Whether the root user can login using ssh.
#+name: ssh-root-login
#+begin_src nix
permitRootLogin = "no";
#+end_src
** ZRAM
ZRAM is a linux kernel module that creates in-memory compressed devices and swap space. Literally download more RAM
#+begin_src nix :tangle modules/services/zram.nix :noweb no-export
# This file is generated from "README.org"
{
  zramSwap = {
    <<zram-enable>>
    <<zram-algorithm>>
    <<zram-memory-percent>>
  };
}
#+end_src
*** Enable ZRAM
#+name: zram-enable
#+begin_src nix
enable = true;
#+end_src
*** ZRAM algorithm
Compression algorithm. lzo has good compression, but is slow. lz4 has bad compression, but is fast.
zstd is both good compression and fast, but requires newer kernel.
#+name: zram-algorithm
#+begin_src nix
algorithm = "zstd";
#+end_src
*** ZRAM memory percent
Maximum amount of memory that can be used by the zram swap devices.
Defaults to 1/2 of total RAM.
#+name: zram-memory-percent
#+begin_src nix
memoryPercent = 100;
#+end_src
** Dunst
Dunst is a minimal notification daemon. Mostly used by WM users.
This module is imported from home-manager
+ [[Notification Colors][Colors]]
#+begin_src nix :tangle modules/services/dunst.nix :noweb no-export
# This file is generated from "README.org"
{
  services.dunst = {
    <<dunst-enable>>
    <<dunst-settings>>
  };
}
#+end_src
*** Enable dunst
#+name: dunst-enable
#+begin_src nix
enable = true;
#+end_src
*** Dunst Settings
Font can be configured [[#dunstnotifications-font][here]]
Colors can be configured [[#notification-colors][here]]
#+name: dunst-settings
#+begin_src nix :noweb no-export
settings = {
    global.transparency = 10;
    global.alignment = "left";
    global.geometry = "300x5-30+20";
    <<dunst-font>>
    <<dunst-colors>>
    urgency_low.timeout = 10;
    urgency_normal.timeout = 10;
    urgency_critical.timeout = 10;
};
#+end_src
** Picom
Picom is a X11 compositor.
It can be used to configure opacity of programs, blur,etc.
This module is imported from home-manager
#+begin_src nix :tangle modules/services/picom.nix :noweb no-export
# This file is generated from "README.org"
{ pkgs, ... }:
{
  services.picom = {
    <<picom-enable>>
    <<picom-package>>
    <<picom-backend>>
    <<picom-experimental-backends>>
    <<picom-opacity>>
    extraOptions = ''
      <<picom-client-opacity>>
      <<picom-detect-rounded-corners>>
      <<picom-blur>>
      <<picom-blur-exclude>>
      <<picom-corner-radius>>
      <<picom-rounded-corners-exclude>>
      <<picom-enable-rounded-borders>>
      <<picom-round-borders-exclude>>
    '';
  };
}
#+end_src

*** Enable picom
#+name: picom-enable
#+begin_src nix
enable = true;
#+end_src
*** Picom package
This fork contains dual kawase blur(KDE-like fancy blur) and rounded borders.
Requires NUR.
#+name: picom-package
#+begin_src nix
package = pkgs.nur.repos.reedrw.picom-next-ibhagwan;
#+end_src
*** Picom backend
xrender backend uses software rendering.
glx uses GPU rendering.
It's obviously that glx is better.
round-borders was originally written for xrender backend, but it's ported to glx
kawase-blur was originally written for glx backend.
Just use glx.
#+name: picom-backend
#+begin_src nix
backend = "glx";
#+end_src
*** Experimental backends
Whether to use the new experimental backends.
Currently, new backends feature better vsync with the xrender backend and improved input lag with the glx backend(for non-NVIDIA users).
Also, I think dual_kawase blur and rounded borders have better implementation within the experimental backends code.
#+name: picom-experimental-backends
#+begin_src nix
experimentalBackends = true;
#+end_src

*** Detect Client Opacity
Detect _NET_WM_OPACITY on client windows.
This prevents opacity being ignored for some apps.
#+name: picom-client-opacity
#+begin_src nix
detect-client-opacity = true;
#+end_src
*** Detect rounded corners
Detect rounded corners and treat them as rectangular
#+name: picom-detect-rounded-corners
#+begin_src nix
detect-rounded-corners = true;
#+end_src
* Machines
** Default system configs
This belongs to each machine configurations.
#+name: machine-configuration-defaults
#+begin_src nix :noweb no-export
# This file is generated from "README.org"
<<machine-configuration-defaultimports>>
#+end_src

*** imports
import files that differs to machine and is stored inside machine directory.
Files that are shared between machines are better to import from [[#defaults][flakes]]
#+name: machine-configuration-defaultimports
#+begin_src nix
imports =
[
    # Include the results of the hardware scan.
    ./hardware-configuration.nix
    # import usersettings
    ./usersettings.nix
];
#+end_src
** Desktop
*** System
** Laptop
*** System
** Server
*** System
* Credits

- [[https://github.com/NixOS/nixos-artwork/tree/master/logo][NixOS/nixos-artwork]] -> NixOS logo. Changed colors and used in lock screen wallpaper. used under [[https://creativecommons.org/licenses/by/4.0][CC-BY license]]
- [[https://wallhaven.cc/w/45xkj1][Wallpaper]]
- Icons from [[https://remixicon.com][Remix Icon]]
